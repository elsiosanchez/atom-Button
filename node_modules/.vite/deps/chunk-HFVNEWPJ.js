import {
  ElIcon
} from "./chunk-VIU7BCLU.js";
import {
  _export_sfc
} from "./chunk-TYL63SS3.js";
import {
  buildProps,
  definePropType,
  iconPropType,
  useNamespace,
  withInstall,
  withNoopInstall
} from "./chunk-4AENOUFB.js";
import {
  createBaseVNode,
  createBlock,
  createElementBlock,
  defineComponent,
  getCurrentInstance,
  inject,
  normalizeClass,
  onMounted,
  openBlock,
  provide,
  ref,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toRefs,
  unref,
  withCtx
} from "./chunk-ZMYV2364.js";

// node_modules/element-plus/es/components/breadcrumb/src/constants.mjs
var breadcrumbKey = Symbol("breadcrumbKey");

// node_modules/element-plus/es/components/breadcrumb/src/breadcrumb.mjs
var breadcrumbProps = buildProps({
  separator: {
    type: String,
    default: "/"
  },
  separatorIcon: {
    type: iconPropType
  }
});

// node_modules/element-plus/es/components/breadcrumb/src/breadcrumb2.mjs
var __default__ = defineComponent({
  name: "ElBreadcrumb"
});
var _sfc_main = defineComponent({
  ...__default__,
  props: breadcrumbProps,
  setup(__props) {
    const props = __props;
    const ns = useNamespace("breadcrumb");
    const breadcrumb = ref();
    provide(breadcrumbKey, props);
    onMounted(() => {
      const items = breadcrumb.value.querySelectorAll(`.${ns.e("item")}`);
      if (items.length) {
        items[items.length - 1].setAttribute("aria-current", "page");
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "breadcrumb",
        ref: breadcrumb,
        class: normalizeClass(unref(ns).b()),
        "aria-label": "Breadcrumb",
        role: "navigation"
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Breadcrumb = _export_sfc(_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb.vue"]]);

// node_modules/element-plus/es/components/breadcrumb/src/breadcrumb-item.mjs
var breadcrumbItemProps = buildProps({
  to: {
    type: definePropType([String, Object]),
    default: ""
  },
  replace: {
    type: Boolean,
    default: false
  }
});

// node_modules/element-plus/es/components/breadcrumb/src/breadcrumb-item2.mjs
var __default__2 = defineComponent({
  name: "ElBreadcrumbItem"
});
var _sfc_main2 = defineComponent({
  ...__default__2,
  props: breadcrumbItemProps,
  setup(__props) {
    const props = __props;
    const instance = getCurrentInstance();
    const breadcrumbContext = inject(breadcrumbKey, void 0);
    const ns = useNamespace("breadcrumb");
    const { separator, separatorIcon } = toRefs(breadcrumbContext);
    const router = instance.appContext.config.globalProperties.$router;
    const link = ref();
    const onClick = () => {
      if (!props.to || !router)
        return;
      props.replace ? router.replace(props.to) : router.push(props.to);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(unref(ns).e("item"))
      }, [
        createBaseVNode("span", {
          ref_key: "link",
          ref: link,
          class: normalizeClass([unref(ns).e("inner"), unref(ns).is("link", !!_ctx.to)]),
          role: "link",
          onClick
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2),
        unref(separatorIcon) ? (openBlock(), createBlock(unref(ElIcon), {
          key: 0,
          class: normalizeClass(unref(ns).e("separator"))
        }, {
          default: withCtx(() => [
            (openBlock(), createBlock(resolveDynamicComponent(unref(separatorIcon))))
          ]),
          _: 1
        }, 8, ["class"])) : (openBlock(), createElementBlock("span", {
          key: 1,
          class: normalizeClass(unref(ns).e("separator")),
          role: "presentation"
        }, toDisplayString(unref(separator)), 3))
      ], 2);
    };
  }
});
var BreadcrumbItem = _export_sfc(_sfc_main2, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb-item.vue"]]);

// node_modules/element-plus/es/components/breadcrumb/index.mjs
var ElBreadcrumb = withInstall(Breadcrumb, {
  BreadcrumbItem
});
var ElBreadcrumbItem = withNoopInstall(BreadcrumbItem);

export {
  breadcrumbKey,
  breadcrumbProps,
  breadcrumbItemProps,
  ElBreadcrumb,
  ElBreadcrumbItem
};
//# sourceMappingURL=chunk-HFVNEWPJ.js.map
