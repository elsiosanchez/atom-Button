{
  "version": 3,
  "sources": ["../../../packages/components/skeleton/src/skeleton.ts", "../../../packages/components/skeleton/src/skeleton-item.ts", "../../../packages/components/skeleton/src/skeleton-item.vue", "../../../packages/components/skeleton/src/skeleton.vue", "../../../packages/components/skeleton/index.ts"],
  "sourcesContent": ["import { buildProps } from '@element-plus/utils'\nimport type Skeleton from './skeleton.vue'\nimport type { ExtractPropTypes } from 'vue'\n\nexport const skeletonProps = buildProps({\n  animated: {\n    type: Boolean,\n    default: false,\n  },\n  count: {\n    type: Number,\n    default: 1,\n  },\n  rows: {\n    type: Number,\n    default: 3,\n  },\n  loading: {\n    type: Boolean,\n    default: true,\n  },\n  throttle: {\n    type: Number,\n  },\n} as const)\nexport type SkeletonProps = ExtractPropTypes<typeof skeletonProps>\n\nexport type SkeletonInstance = InstanceType<typeof Skeleton>\n", "import { buildProps } from '@element-plus/utils'\nimport type SkeletonItem from './skeleton-item.vue'\nimport type { ExtractPropTypes } from 'vue'\n\nexport const skeletonItemProps = buildProps({\n  variant: {\n    type: String,\n    values: [\n      'circle',\n      'rect',\n      'h1',\n      'h3',\n      'text',\n      'caption',\n      'p',\n      'image',\n      'button',\n    ],\n    default: 'text',\n  },\n} as const)\nexport type SkeletonItemProps = ExtractPropTypes<typeof skeletonItemProps>\n\nexport type SkeletonItemInstance = InstanceType<typeof SkeletonItem>\n", "<template>\n  <div :class=\"[ns.e('item'), ns.e(variant)]\">\n    <picture-filled v-if=\"variant === 'image'\" />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { useNamespace } from '@element-plus/hooks'\nimport { PictureFilled } from '@element-plus/icons-vue'\nimport { skeletonItemProps } from './skeleton-item'\n\ndefineOptions({\n  name: 'ElSkeletonItem',\n})\ndefineProps(skeletonItemProps)\nconst ns = useNamespace('skeleton')\n</script>\n", "<template>\n  <template v-if=\"uiLoading\">\n    <div :class=\"[ns.b(), ns.is('animated', animated)]\" v-bind=\"$attrs\">\n      <template v-for=\"i in count\" :key=\"i\">\n        <slot v-if=\"loading\" :key=\"i\" name=\"template\">\n          <el-skeleton-item :class=\"ns.is('first')\" variant=\"p\" />\n          <el-skeleton-item\n            v-for=\"item in rows\"\n            :key=\"item\"\n            :class=\"[\n              ns.e('paragraph'),\n              ns.is('last', item === rows && rows > 1),\n            ]\"\n            variant=\"p\"\n          />\n        </slot>\n      </template>\n    </div>\n  </template>\n  <template v-else>\n    <slot v-bind=\"$attrs\" />\n  </template>\n</template>\n\n<script lang=\"ts\" setup>\nimport { toRef } from 'vue'\nimport { useNamespace, useThrottleRender } from '@element-plus/hooks'\nimport { skeletonProps } from './skeleton'\nimport ElSkeletonItem from './skeleton-item.vue'\n\ndefineOptions({\n  name: 'ElSkeleton',\n})\nconst props = defineProps(skeletonProps)\n\nconst ns = useNamespace('skeleton')\nconst uiLoading = useThrottleRender(toRef(props, 'loading'), props.throttle)\n\ndefineExpose({\n  /** @description loading state */\n  uiLoading,\n})\n</script>\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Skeleton from './src/skeleton.vue'\nimport SkeletonItem from './src/skeleton-item.vue'\n\nexport const ElSkeleton = withInstall(Skeleton, {\n  SkeletonItem,\n})\nexport const ElSkeletonItem = withNoopInstall(SkeletonItem)\nexport default ElSkeleton\n\nexport * from './src/skeleton'\nexport * from './src/skeleton-item'\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACY,IAAC,gBAAgB,WAAW;EACtC,UAAU;IACR,MAAM;IACN,SAAS;EACb;EACE,OAAO;IACL,MAAM;IACN,SAAS;EACb;EACE,MAAM;IACJ,MAAM;IACN,SAAS;EACb;EACE,SAAS;IACP,MAAM;IACN,SAAS;EACb;EACE,UAAU;IACR,MAAM;EACV;AACA,CAAC;;;ACpBW,IAAC,oBAAoB,WAAW;EAC1C,SAAS;IACP,MAAM;IACN,QAAQ;MACN;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACN;IACI,SAAS;EACb;AACA,CAAC;;;kCCNa;EACZ,MAAM;AACR,CAAA;;;;;AAEM,UAAA,KAAK,aAAa,UAAU;;;;;;;;;;;;;mCCepB;EACZ,MAAM;AACR,CAAA;;;;;;AAGM,UAAA,KAAK,aAAa,UAAU;AAClC,UAAM,YAAY,kBAAkB,MAAM,OAAO,SAAS,GAAG,MAAM,QAAQ;AAE9D,WAAA;MAEX;IAAA,CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCW,IAAC,aAAa,YAAY,UAAU;EAC9C;AACF,CAAC;AACW,IAAC,iBAAiB,gBAAgB,YAAY;",
  "names": []
}
