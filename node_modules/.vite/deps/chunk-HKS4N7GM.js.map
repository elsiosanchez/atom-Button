{
  "version": 3,
  "sources": ["../../../packages/components/table-v2/src/constants.ts", "../../../packages/components/table-v2/src/private.ts", "../../../packages/components/table-v2/src/composables/utils.ts", "../../../packages/components/table-v2/src/composables/use-columns.ts", "../../../packages/components/table-v2/src/composables/use-scrollbar.ts", "../../../packages/components/table-v2/src/composables/use-row.ts", "../../../packages/components/table-v2/src/composables/use-data.ts", "../../../packages/components/table-v2/src/utils.ts", "../../../packages/components/table-v2/src/composables/use-styles.ts", "../../../packages/components/table-v2/src/composables/use-auto-resize.ts", "../../../packages/components/table-v2/src/use-table.ts", "../../../packages/components/table-v2/src/tokens.ts", "../../../packages/components/table-v2/src/common.ts", "../../../packages/components/table-v2/src/row.ts", "../../../packages/components/table-v2/src/header.ts", "../../../packages/components/table-v2/src/grid.ts", "../../../packages/components/table-v2/src/table.ts", "../../../packages/components/table-v2/src/components/cell.tsx", "../../../packages/components/table-v2/src/components/header-cell.tsx", "../../../packages/components/table-v2/src/header-row.ts", "../../../packages/components/table-v2/src/components/header-row.tsx", "../../../packages/components/table-v2/src/components/header.tsx", "../../../packages/components/table-v2/src/components/row.tsx", "../../../packages/components/table-v2/src/components/sort-icon.tsx", "../../../packages/components/table-v2/src/components/expand-icon.tsx", "../../../packages/components/table-v2/src/table-grid.tsx", "../../../packages/components/table-v2/src/renderers/main-table.tsx", "../../../packages/components/table-v2/src/renderers/left-table.tsx", "../../../packages/components/table-v2/src/renderers/right-table.tsx", "../../../packages/components/table-v2/src/renderers/row.tsx", "../../../packages/components/table-v2/src/renderers/cell.tsx", "../../../packages/components/table-v2/src/renderers/header.tsx", "../../../packages/components/table-v2/src/renderers/header-cell.tsx", "../../../packages/components/table-v2/src/renderers/footer.tsx", "../../../packages/components/table-v2/src/renderers/empty.tsx", "../../../packages/components/table-v2/src/renderers/overlay.tsx", "../../../packages/components/table-v2/src/table-v2.tsx", "../../../packages/components/table-v2/src/auto-resizer.ts", "../../../packages/components/table-v2/src/components/auto-resizer.tsx", "../../../packages/components/table-v2/index.ts"],
  "sourcesContent": ["export enum SortOrder {\n  ASC = 'asc',\n  DESC = 'desc',\n}\n\nexport enum Alignment {\n  CENTER = 'center',\n  RIGHT = 'right',\n}\n\nexport enum FixedDir {\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport const oppositeOrderMap = {\n  [SortOrder.ASC]: SortOrder.DESC,\n  [SortOrder.DESC]: SortOrder.ASC,\n}\n\nexport const sortOrders = [SortOrder.ASC, SortOrder.DESC] as const\n", "export const placeholderSign = Symbol('placeholder')\n", "import type { CSSProperties } from 'vue'\nimport type { AnyColumns } from '../types'\n\nexport const calcColumnStyle = (\n  column: AnyColumns[number],\n  fixedColumn: boolean,\n  fixed: boolean\n): CSSProperties => {\n  const flex = {\n    flexGrow: 0,\n    flexShrink: 0,\n    ...(fixed\n      ? {}\n      : {\n          flexGrow: column.flexGrow || 0,\n          flexShrink: column.flexShrink || 1,\n        }),\n  }\n\n  if (!fixed) {\n    flex.flexShrink = 1\n  }\n\n  const style = {\n    ...(column.style ?? {}),\n    ...flex,\n    flexBasis: 'auto',\n    width: column.width,\n  }\n\n  if (!fixedColumn) {\n    if (column.maxWidth) style.maxWidth = column.maxWidth\n    if (column.minWidth) style.minWidth = column.minWidth\n  }\n\n  return style\n}\n", "// @ts-nocheck\nimport { computed, unref } from 'vue'\nimport { isObject } from '@element-plus/utils'\nimport { SortOrder, oppositeOrderMap } from '../constants'\nimport { placeholderSign } from '../private'\nimport { calcColumnStyle } from './utils'\n\nimport type { CSSProperties, Ref } from 'vue'\nimport type { TableV2Props } from '../table'\nimport type { AnyColumns, Column, KeyType } from '../types'\n\nfunction useColumns(\n  props: TableV2Props,\n  columns: Ref<AnyColumns>,\n  fixed: Ref<boolean>\n) {\n  const visibleColumns = computed(() => {\n    return unref(columns).filter((column) => !column.hidden)\n  })\n\n  const fixedColumnsOnLeft = computed(() =>\n    unref(visibleColumns).filter(\n      (column) => column.fixed === 'left' || column.fixed === true\n    )\n  )\n\n  const fixedColumnsOnRight = computed(() =>\n    unref(visibleColumns).filter((column) => column.fixed === 'right')\n  )\n\n  const normalColumns = computed(() =>\n    unref(visibleColumns).filter((column) => !column.fixed)\n  )\n\n  const mainColumns = computed(() => {\n    const ret: AnyColumns = []\n\n    unref(fixedColumnsOnLeft).forEach((column) => {\n      ret.push({\n        ...column,\n        placeholderSign,\n      })\n    })\n\n    unref(normalColumns).forEach((column) => {\n      ret.push(column)\n    })\n\n    unref(fixedColumnsOnRight).forEach((column) => {\n      ret.push({\n        ...column,\n        placeholderSign,\n      })\n    })\n\n    return ret\n  })\n\n  const hasFixedColumns = computed(() => {\n    return unref(fixedColumnsOnLeft).length || unref(fixedColumnsOnRight).length\n  })\n\n  const columnsStyles = computed(() => {\n    const _columns = unref(columns)\n\n    return _columns.reduce<Record<Column<any>['key'], CSSProperties>>(\n      (style, column) => {\n        style[column.key] = calcColumnStyle(column, unref(fixed), props.fixed)\n        return style\n      },\n      {}\n    )\n  })\n\n  const columnsTotalWidth = computed(() => {\n    return unref(visibleColumns).reduce(\n      (width, column) => width + column.width,\n      0\n    )\n  })\n\n  const getColumn = (key: KeyType) => {\n    return unref(columns).find((column) => column.key === key)\n  }\n\n  const getColumnStyle = (key: KeyType) => {\n    return unref(columnsStyles)[key]\n  }\n\n  const updateColumnWidth = (column: Column<any>, width: number) => {\n    column.width = width\n  }\n\n  function onColumnSorted(e: MouseEvent) {\n    const { key } = (e.currentTarget as HTMLElement).dataset\n    if (!key) return\n    const { sortState, sortBy } = props\n\n    let order = SortOrder.ASC\n\n    if (isObject(sortState)) {\n      order = oppositeOrderMap[sortState[key]]\n    } else {\n      order = oppositeOrderMap[sortBy.order]\n    }\n\n    props.onColumnSort?.({ column: getColumn(key)!, key, order })\n  }\n\n  return {\n    columns,\n    columnsStyles,\n    columnsTotalWidth,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n    hasFixedColumns,\n    mainColumns,\n    normalColumns,\n    visibleColumns,\n\n    getColumn,\n    getColumnStyle,\n    updateColumnWidth,\n    onColumnSorted,\n  }\n}\n\nexport { useColumns }\nexport type UseColumnsReturn = ReturnType<typeof useColumns>\n", "import { ref, unref, watch } from 'vue'\n\nimport type { Ref } from 'vue'\nimport type { Alignment as ScrollStrategy } from '@element-plus/components/virtual-list'\nimport type { TableV2Props } from '../table'\nimport type { TableGridInstance } from '../table-grid'\n\nexport type ScrollPos = { scrollLeft: number; scrollTop: number }\ntype GridInstanceRef = Ref<TableGridInstance | undefined>\n\ntype UseScrollBarProps = {\n  mainTableRef: GridInstanceRef\n  leftTableRef: GridInstanceRef\n  rightTableRef: GridInstanceRef\n\n  onMaybeEndReached: () => void\n}\n\nexport type { ScrollStrategy }\n\nexport const useScrollbar = (\n  props: TableV2Props,\n  {\n    mainTableRef,\n    leftTableRef,\n    rightTableRef,\n    onMaybeEndReached,\n  }: UseScrollBarProps\n) => {\n  const scrollPos = ref<ScrollPos>({ scrollLeft: 0, scrollTop: 0 })\n\n  function doScroll(params: ScrollPos) {\n    const { scrollTop } = params\n\n    mainTableRef.value?.scrollTo(params)\n    leftTableRef.value?.scrollToTop(scrollTop)\n    rightTableRef.value?.scrollToTop(scrollTop)\n  }\n\n  // methods\n  function scrollTo(params: ScrollPos) {\n    scrollPos.value = params\n\n    doScroll(params)\n  }\n\n  function scrollToTop(scrollTop: number) {\n    scrollPos.value.scrollTop = scrollTop\n\n    doScroll(unref(scrollPos))\n  }\n\n  function scrollToLeft(scrollLeft: number) {\n    scrollPos.value.scrollLeft = scrollLeft\n\n    mainTableRef.value?.scrollTo?.(unref(scrollPos))\n  }\n\n  function onScroll(params: ScrollPos) {\n    scrollTo(params)\n    props.onScroll?.(params)\n  }\n\n  function onVerticalScroll({ scrollTop }: ScrollPos) {\n    const { scrollTop: currentScrollTop } = unref(scrollPos)\n    if (scrollTop !== currentScrollTop) scrollToTop(scrollTop)\n  }\n\n  function scrollToRow(row: number, strategy: ScrollStrategy = 'auto') {\n    mainTableRef.value?.scrollToRow(row, strategy)\n  }\n\n  // When scrollTop changes, maybe reaching the bottom\n  watch(\n    () => unref(scrollPos).scrollTop,\n    (cur, prev) => {\n      if (cur > prev) onMaybeEndReached()\n    }\n  )\n\n  return {\n    scrollPos,\n\n    scrollTo,\n    scrollToLeft,\n    scrollToTop,\n    scrollToRow,\n    onScroll,\n    onVerticalScroll,\n  }\n}\n", "import {\n  computed,\n  getCurrentInstance,\n  ref,\n  shallowRef,\n  unref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { isNumber } from '@element-plus/utils'\nimport { FixedDir } from '../constants'\n\nimport type { Ref } from 'vue'\nimport type { TableV2Props } from '../table'\nimport type {\n  RowExpandParams,\n  RowHeightChangedParams,\n  RowHoverParams,\n} from '../row'\nimport type { FixedDirection, KeyType } from '../types'\nimport type { onRowRenderedParams } from '../grid'\nimport type { TableGridInstance } from '../table-grid'\n\ntype Heights = Record<KeyType, number>\ntype GridInstanceRef = Ref<TableGridInstance | undefined>\n\ntype UseRowProps = {\n  mainTableRef: GridInstanceRef\n  leftTableRef: GridInstanceRef\n  rightTableRef: GridInstanceRef\n\n  onMaybeEndReached: () => void\n}\n\nexport const useRow = (\n  props: TableV2Props,\n  { mainTableRef, leftTableRef, rightTableRef, onMaybeEndReached }: UseRowProps\n) => {\n  const vm = getCurrentInstance()!\n  const { emit } = vm\n  const isResetting = shallowRef(false)\n  const hoveringRowKey = shallowRef<KeyType | null>(null)\n  const expandedRowKeys = ref<KeyType[]>(props.defaultExpandedRowKeys || [])\n  const lastRenderedRowIndex = ref(-1)\n  const resetIndex = shallowRef<number | null>(null)\n  const rowHeights = ref<Heights>({})\n  const pendingRowHeights = ref<Heights>({})\n  const leftTableHeights = shallowRef<Heights>({})\n  const mainTableHeights = shallowRef<Heights>({})\n  const rightTableHeights = shallowRef<Heights>({})\n  const isDynamic = computed(() => isNumber(props.estimatedRowHeight))\n\n  function onRowsRendered(params: onRowRenderedParams) {\n    props.onRowsRendered?.(params)\n\n    if (params.rowCacheEnd > unref(lastRenderedRowIndex)) {\n      lastRenderedRowIndex.value = params.rowCacheEnd\n    }\n  }\n\n  function onRowHovered({ hovered, rowKey }: RowHoverParams) {\n    hoveringRowKey.value = hovered ? rowKey : null\n  }\n\n  function onRowExpanded({\n    expanded,\n    rowData,\n    rowIndex,\n    rowKey,\n  }: RowExpandParams) {\n    const _expandedRowKeys = [...unref(expandedRowKeys)]\n    const currentKeyIndex = _expandedRowKeys.indexOf(rowKey)\n    if (expanded) {\n      if (currentKeyIndex === -1) _expandedRowKeys.push(rowKey)\n    } else {\n      if (currentKeyIndex > -1) _expandedRowKeys.splice(currentKeyIndex, 1)\n    }\n    expandedRowKeys.value = _expandedRowKeys\n\n    emit('update:expandedRowKeys', _expandedRowKeys)\n    props.onRowExpand?.({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey,\n    })\n    // If this is not controlled, then use this to notify changes\n    props.onExpandedRowsChange?.(_expandedRowKeys)\n  }\n\n  const flushingRowHeights = debounce(() => {\n    isResetting.value = true\n    rowHeights.value = { ...unref(rowHeights), ...unref(pendingRowHeights) }\n    resetAfterIndex(unref(resetIndex)!, false)\n    pendingRowHeights.value = {}\n    // force update\n    resetIndex.value = null\n    mainTableRef.value?.forceUpdate()\n    leftTableRef.value?.forceUpdate()\n    rightTableRef.value?.forceUpdate()\n    vm.proxy?.$forceUpdate()\n    isResetting.value = false\n  }, 0)\n\n  function resetAfterIndex(index: number, forceUpdate = false) {\n    if (!unref(isDynamic)) return\n    ;[mainTableRef, leftTableRef, rightTableRef].forEach((tableRef) => {\n      const table = unref(tableRef)\n      if (table) table.resetAfterRowIndex(index, forceUpdate)\n    })\n  }\n\n  function resetHeights(rowKey: KeyType, height: number, rowIdx: number) {\n    const resetIdx = unref(resetIndex)\n    if (resetIdx === null) {\n      resetIndex.value = rowIdx\n    } else {\n      if (resetIdx > rowIdx) {\n        resetIndex.value = rowIdx\n      }\n    }\n\n    pendingRowHeights.value[rowKey] = height\n  }\n\n  function onRowHeightChange(\n    { rowKey, height, rowIndex }: RowHeightChangedParams,\n    fixedDir: FixedDirection\n  ) {\n    if (!fixedDir) {\n      mainTableHeights.value[rowKey] = height\n    } else {\n      if (fixedDir === FixedDir.RIGHT) {\n        rightTableHeights.value[rowKey] = height\n      } else {\n        leftTableHeights.value[rowKey] = height\n      }\n    }\n\n    const maximumHeight = Math.max(\n      ...[leftTableHeights, rightTableHeights, mainTableHeights].map(\n        (records) => records.value[rowKey] || 0\n      )\n    )\n\n    if (unref(rowHeights)[rowKey] !== maximumHeight) {\n      resetHeights(rowKey, maximumHeight, rowIndex)\n      flushingRowHeights()\n    }\n  }\n  // when rendered row changes, maybe reaching the bottom\n  watch(lastRenderedRowIndex, () => onMaybeEndReached())\n\n  return {\n    hoveringRowKey,\n    expandedRowKeys,\n    lastRenderedRowIndex,\n    isDynamic,\n    isResetting,\n    rowHeights,\n\n    resetAfterIndex,\n    onRowExpanded,\n    onRowHovered,\n    onRowsRendered,\n    onRowHeightChange,\n  }\n}\n\nexport type UseRowReturn = ReturnType<typeof useRow>\n", "import { computed, ref, unref, watch } from 'vue'\n\nimport type { TableV2Props } from '../table'\nimport type { KeyType } from '../types'\nimport type { UseRowReturn } from './use-row'\n\ntype UseDataProps = {\n  expandedRowKeys: UseRowReturn['expandedRowKeys']\n  lastRenderedRowIndex: UseRowReturn['lastRenderedRowIndex']\n  resetAfterIndex: UseRowReturn['resetAfterIndex']\n}\n\nexport const useData = (\n  props: TableV2Props,\n  { expandedRowKeys, lastRenderedRowIndex, resetAfterIndex }: UseDataProps\n) => {\n  const depthMap = ref<Record<KeyType, number>>({})\n\n  const flattenedData = computed(() => {\n    const depths: Record<KeyType, number> = {}\n    const { data, rowKey } = props\n\n    const _expandedRowKeys = unref(expandedRowKeys)\n\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data\n\n    const array: any[] = []\n    const keysSet = new Set()\n    _expandedRowKeys.forEach((x) => keysSet.add(x))\n\n    let copy: any[] = data.slice()\n    copy.forEach((x) => (depths[x[rowKey]] = 0))\n    while (copy.length > 0) {\n      const item = copy.shift()!\n\n      array.push(item)\n      if (\n        keysSet.has(item[rowKey]) &&\n        Array.isArray(item.children) &&\n        item.children.length > 0\n      ) {\n        copy = [...item.children, ...copy]\n        item.children.forEach(\n          (child: any) => (depths[child[rowKey]] = depths[item[rowKey]] + 1)\n        )\n      }\n    }\n\n    depthMap.value = depths\n    return array\n  })\n\n  const data = computed(() => {\n    const { data, expandColumnKey } = props\n    return expandColumnKey ? unref(flattenedData) : data\n  })\n\n  watch(data, (val, prev) => {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1\n      resetAfterIndex(0, true)\n    }\n  })\n\n  return {\n    data,\n    depthMap,\n  }\n}\n\nexport type UseDataReturn = ReturnType<typeof useData>\n", "import { h, isVNode } from 'vue'\nimport { addUnit, isArray, isFunction } from '@element-plus/utils'\n\nimport type { CSSProperties, Component, Slot } from 'vue'\n\nconst sumReducer = (sum: number, num: number) => sum + num\n\nexport const sum = (listLike: number | number[]) => {\n  return isArray(listLike) ? listLike.reduce(sumReducer, 0) : listLike\n}\n\nexport const tryCall = <T>(\n  fLike: T,\n  params: T extends (...args: infer K) => unknown ? K : any,\n  defaultRet = {}\n) => {\n  return isFunction(fLike) ? fLike(params) : fLike ?? defaultRet\n}\n\nexport const enforceUnit = (style: CSSProperties) => {\n  ;(['width', 'maxWidth', 'minWidth', 'height'] as const).forEach((key) => {\n    style[key] = addUnit(style[key])\n  })\n\n  return style\n}\n\nexport const componentToSlot = <T>(\n  ComponentLike: JSX.Element | ((props: T) => Component<T>) | undefined\n) =>\n  isVNode(ComponentLike)\n    ? (props: T) => h(ComponentLike, props)\n    : (ComponentLike as Slot)\n", "import { computed, unref } from 'vue'\nimport { addUnit, isNumber } from '@element-plus/utils'\nimport { enforceUnit, sum } from '../utils'\n\nimport type { CSSProperties } from 'vue'\nimport type { TableV2Props } from '../table'\nimport type { UseColumnsReturn } from './use-columns'\nimport type { UseDataReturn } from './use-data'\n\ntype UseStyleProps = {\n  columnsTotalWidth: UseColumnsReturn['columnsTotalWidth']\n  data: UseDataReturn['data']\n  fixedColumnsOnLeft: UseColumnsReturn['fixedColumnsOnLeft']\n  fixedColumnsOnRight: UseColumnsReturn['fixedColumnsOnRight']\n}\n\nexport const useStyles = (\n  props: TableV2Props,\n  {\n    columnsTotalWidth,\n    data,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n  }: UseStyleProps\n) => {\n  const bodyWidth = computed(() => {\n    const { fixed, width, vScrollbarSize } = props\n    const ret = width - vScrollbarSize\n    return fixed ? Math.max(Math.round(unref(columnsTotalWidth)), ret) : ret\n  })\n\n  const headerWidth = computed(\n    () => unref(bodyWidth) + (props.fixed ? props.vScrollbarSize : 0)\n  )\n\n  const mainTableHeight = computed(() => {\n    const { height = 0, maxHeight = 0, footerHeight, hScrollbarSize } = props\n\n    if (maxHeight > 0) {\n      const _fixedRowsHeight = unref(fixedRowsHeight)\n      const _rowsHeight = unref(rowsHeight)\n      const _headerHeight = unref(headerHeight)\n      const total =\n        _headerHeight + _fixedRowsHeight + _rowsHeight + hScrollbarSize\n\n      return Math.min(total, maxHeight - footerHeight)\n    }\n\n    return height - footerHeight\n  })\n\n  const rowsHeight = computed(() => {\n    const { rowHeight, estimatedRowHeight } = props\n    const _data = unref(data)\n    if (isNumber(estimatedRowHeight)) {\n      return _data.length * estimatedRowHeight\n    }\n\n    return _data.length * rowHeight\n  })\n\n  const fixedTableHeight = computed(() => {\n    const { maxHeight } = props\n    const tableHeight = unref(mainTableHeight)\n    if (isNumber(maxHeight) && maxHeight > 0) return tableHeight\n\n    const totalHeight =\n      unref(rowsHeight) + unref(headerHeight) + unref(fixedRowsHeight)\n\n    return Math.min(tableHeight, totalHeight)\n  })\n\n  const mapColumn = (column: TableV2Props['columns'][number]) => column.width\n\n  const leftTableWidth = computed(() =>\n    sum(unref(fixedColumnsOnLeft).map(mapColumn))\n  )\n\n  const rightTableWidth = computed(() =>\n    sum(unref(fixedColumnsOnRight).map(mapColumn))\n  )\n\n  const headerHeight = computed(() => sum(props.headerHeight))\n\n  const fixedRowsHeight = computed(() => {\n    return (props.fixedData?.length || 0) * props.rowHeight\n  })\n\n  const windowHeight = computed(() => {\n    return unref(mainTableHeight) - unref(headerHeight) - unref(fixedRowsHeight)\n  })\n\n  const rootStyle = computed<CSSProperties>(() => {\n    const { style = {}, height, width } = props\n    return enforceUnit({\n      ...style,\n      height,\n      width,\n    })\n  })\n\n  const footerHeight = computed(() =>\n    enforceUnit({ height: props.footerHeight })\n  )\n\n  const emptyStyle = computed<CSSProperties>(() => ({\n    top: addUnit(unref(headerHeight)),\n    bottom: addUnit(props.footerHeight),\n    width: addUnit(props.width),\n  }))\n\n  return {\n    bodyWidth,\n    fixedTableHeight,\n    mainTableHeight,\n    leftTableWidth,\n    rightTableWidth,\n    headerWidth,\n    rowsHeight,\n    windowHeight,\n    footerHeight,\n    emptyStyle,\n    rootStyle,\n    headerHeight,\n  }\n}\n\nexport type UseStyleReturn = ReturnType<typeof useStyles>\n", "import { onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\n\nimport type { AutoResizerProps } from '../auto-resizer'\n\nconst useAutoResize = (props: AutoResizerProps) => {\n  const sizer = ref<HTMLElement>()\n  const width$ = ref(0)\n  const height$ = ref(0)\n\n  let resizerStopper: ReturnType<typeof useResizeObserver>['stop']\n  onMounted(() => {\n    resizerStopper = useResizeObserver(sizer, ([entry]) => {\n      const { width, height } = entry.contentRect\n      const { paddingLeft, paddingRight, paddingTop, paddingBottom } =\n        getComputedStyle(entry.target)\n\n      const left = Number.parseInt(paddingLeft) || 0\n      const right = Number.parseInt(paddingRight) || 0\n      const top = Number.parseInt(paddingTop) || 0\n      const bottom = Number.parseInt(paddingBottom) || 0\n\n      width$.value = width - left - right\n      height$.value = height - top - bottom\n    }).stop\n  })\n\n  onBeforeUnmount(() => {\n    resizerStopper?.()\n  })\n\n  watch([width$, height$], ([width, height]) => {\n    props.onResize?.({\n      width,\n      height,\n    })\n  })\n\n  return {\n    sizer,\n    width: width$,\n    height: height$,\n  }\n}\n\nexport { useAutoResize }\n", "import { computed, ref, shallowRef, toRef, unref, watch } from 'vue'\nimport { isArray } from '@element-plus/utils'\nimport {\n  useColumns,\n  useData,\n  useRow,\n  useScrollbar,\n  useStyles,\n} from './composables'\n\nimport type { TableV2Props } from './table'\nimport type { TableGridInstance } from './table-grid'\n\nfunction useTable(props: TableV2Props) {\n  const mainTableRef = ref<TableGridInstance>()\n  const leftTableRef = ref<TableGridInstance>()\n  const rightTableRef = ref<TableGridInstance>()\n  const {\n    columns,\n    columnsStyles,\n    columnsTotalWidth,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n    hasFixedColumns,\n    mainColumns,\n\n    onColumnSorted,\n  } = useColumns(props, toRef(props, 'columns'), toRef(props, 'fixed'))\n\n  const {\n    scrollTo,\n    scrollToLeft,\n    scrollToTop,\n    scrollToRow,\n    onScroll,\n    onVerticalScroll,\n    scrollPos,\n  } = useScrollbar(props, {\n    mainTableRef,\n    leftTableRef,\n    rightTableRef,\n\n    onMaybeEndReached,\n  })\n\n  const {\n    expandedRowKeys,\n    hoveringRowKey,\n    lastRenderedRowIndex,\n    isDynamic,\n    isResetting,\n    rowHeights,\n\n    resetAfterIndex,\n    onRowExpanded,\n    onRowHeightChange,\n    onRowHovered,\n    onRowsRendered,\n  } = useRow(props, {\n    mainTableRef,\n    leftTableRef,\n    rightTableRef,\n\n    onMaybeEndReached,\n  })\n\n  const { data, depthMap } = useData(props, {\n    expandedRowKeys,\n    lastRenderedRowIndex,\n    resetAfterIndex,\n  })\n\n  const {\n    bodyWidth,\n    fixedTableHeight,\n    mainTableHeight,\n    leftTableWidth,\n    rightTableWidth,\n    headerWidth,\n    rowsHeight,\n    windowHeight,\n    footerHeight,\n    emptyStyle,\n    rootStyle,\n    headerHeight,\n  } = useStyles(props, {\n    columnsTotalWidth,\n    data,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n  })\n  // state\n  const isScrolling = shallowRef(false)\n\n  // DOM/Component refs\n  const containerRef = ref()\n\n  const showEmpty = computed(() => {\n    const noData = unref(data).length === 0\n\n    return isArray(props.fixedData)\n      ? props.fixedData.length === 0 && noData\n      : noData\n  })\n\n  function getRowHeight(rowIndex: number) {\n    const { estimatedRowHeight, rowHeight, rowKey } = props\n\n    if (!estimatedRowHeight) return rowHeight\n\n    return (\n      unref(rowHeights)[unref(data)[rowIndex][rowKey]] || estimatedRowHeight\n    )\n  }\n\n  function onMaybeEndReached() {\n    const { onEndReached } = props\n    if (!onEndReached) return\n\n    const { scrollTop } = unref(scrollPos)\n\n    const _totalHeight = unref(rowsHeight)\n    const clientHeight = unref(windowHeight)\n\n    const heightUntilEnd =\n      _totalHeight - (scrollTop + clientHeight) + props.hScrollbarSize\n\n    if (\n      unref(lastRenderedRowIndex) >= 0 &&\n      _totalHeight === scrollTop + unref(mainTableHeight) - unref(headerHeight)\n    ) {\n      onEndReached(heightUntilEnd)\n    }\n  }\n\n  // events\n\n  watch(\n    () => props.expandedRowKeys,\n    (val) => (expandedRowKeys.value = val),\n    {\n      deep: true,\n    }\n  )\n\n  return {\n    // models\n    columns,\n    containerRef,\n    mainTableRef,\n    leftTableRef,\n    rightTableRef,\n    // states\n    isDynamic,\n    isResetting,\n    isScrolling,\n    hoveringRowKey,\n    hasFixedColumns,\n    // records\n    columnsStyles,\n    columnsTotalWidth,\n    data,\n    expandedRowKeys,\n    depthMap,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n    mainColumns,\n    // metadata\n    bodyWidth,\n    emptyStyle,\n    rootStyle,\n    headerWidth,\n    footerHeight,\n    mainTableHeight,\n    fixedTableHeight,\n    leftTableWidth,\n    rightTableWidth,\n    // flags\n    showEmpty,\n\n    // methods\n    getRowHeight,\n\n    // event handlers\n    onColumnSorted,\n    onRowHovered,\n    onRowExpanded,\n    onRowsRendered,\n    onRowHeightChange,\n    // use scrollbars\n    scrollTo,\n    scrollToLeft,\n    scrollToTop,\n    scrollToRow,\n    onScroll,\n    onVerticalScroll,\n  }\n}\n\nexport { useTable }\n\nexport type UseTableReturn = ReturnType<typeof useTable>\n", "import type { InjectionKey, Ref } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { KeyType } from './types'\n\nexport type TableV2Context = {\n  isScrolling: Ref<boolean>\n  hoveringRowKey: Ref<null | KeyType>\n  isResetting: Ref<boolean>\n  ns: UseNamespaceReturn\n}\n\nexport const TableV2InjectionKey: InjectionKey<TableV2Context> =\n  Symbol('tableV2')\n", "import { definePropType, mutable } from '@element-plus/utils'\n\nimport type { CSSProperties } from 'vue'\nimport type { Column, KeyType } from './types'\n\nexport type AnyColumn = Column<any>\n\n/**\n * @Note even though we can use `string[] | string` as the type but for\n * convenience here we only use `string` as the acceptable value here.\n */\nexport const classType = String\n\nexport const columns = {\n  type: definePropType<AnyColumn[]>(Array),\n  required: true,\n} as const\n\nexport const column = {\n  type: definePropType<AnyColumn>(Object),\n} as const\n\nexport const fixedDataType = {\n  type: definePropType<any[]>(Array),\n} as const\n\nexport const dataType = {\n  ...fixedDataType,\n  required: true,\n} as const\n\nexport const expandColumnKey = String\n\nexport const expandKeys = {\n  type: definePropType<KeyType[]>(Array),\n  default: () => mutable([]),\n} as const\n\nexport const requiredNumber = {\n  type: Number,\n  required: true,\n} as const\n\nexport const rowKey = {\n  type: definePropType<KeyType>([String, Number, Symbol]),\n  default: 'id',\n} as const\n\n/**\n * @note even though we can use `StyleValue` but that would be difficult for us to mapping them,\n * so we only use `CSSProperties` as the acceptable value here.\n */\nexport const styleType = {\n  type: definePropType<CSSProperties>(Object),\n}\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport { virtualizedGridProps } from '@element-plus/components/virtual-list'\nimport { columns, expandColumnKey, rowKey } from './common'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { FixedDirection, KeyType, RowCommonParams } from './types'\n\nexport type RowExpandParams = {\n  expanded: boolean\n  rowKey: KeyType\n} & RowCommonParams\n\nexport type RowHoverParams = {\n  event: MouseEvent\n  hovered: boolean\n  rowKey: KeyType\n} & RowCommonParams\n\nexport type RowEventHandlerParams = {\n  rowKey: KeyType\n  event: Event\n} & RowCommonParams\n\nexport type RowHeightChangedParams = {\n  rowKey: KeyType\n  height: number\n  rowIndex: number\n}\n\nexport type RowExpandHandler = (params: RowExpandParams) => void\nexport type RowHoverHandler = (params: RowHoverParams) => void\nexport type RowEventHandler = (params: RowEventHandlerParams) => void\nexport type RowHeightChangeHandler = (\n  row: RowHeightChangedParams,\n  fixedDirection: boolean | FixedDirection | undefined\n) => void\n\nexport type RowEventHandlers = {\n  onClick?: RowEventHandler\n  onContextmenu?: RowEventHandler\n  onDblclick?: RowEventHandler\n  onMouseenter?: RowEventHandler\n  onMouseleave?: RowEventHandler\n}\n\nexport const tableV2RowProps = buildProps({\n  class: String,\n  columns,\n  columnsStyles: {\n    type: definePropType<Record<KeyType, CSSProperties>>(Object),\n    required: true,\n  },\n  depth: Number,\n  expandColumnKey,\n  estimatedRowHeight: {\n    ...virtualizedGridProps.estimatedRowHeight,\n    default: undefined,\n  },\n  isScrolling: Boolean,\n  onRowExpand: {\n    type: definePropType<RowExpandHandler>(Function),\n  },\n  onRowHover: {\n    type: definePropType<RowHoverHandler>(Function),\n  },\n  onRowHeightChange: {\n    type: definePropType<RowHeightChangeHandler>(Function),\n  },\n  rowData: {\n    type: definePropType<any>(Object),\n    required: true,\n  },\n  rowEventHandlers: {\n    type: definePropType<RowEventHandlers>(Object),\n  },\n  rowIndex: {\n    type: Number,\n    required: true,\n  },\n  /**\n   * Unique item key\n   */\n  rowKey,\n  style: {\n    type: definePropType<CSSProperties>(Object),\n  },\n} as const)\n\nexport type TableV2RowProps = ExtractPropTypes<typeof tableV2RowProps>\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport { columns } from './common'\n\nimport type { ExtractPropTypes } from 'vue'\n\nconst requiredNumberType = {\n  type: Number,\n  required: true,\n} as const\n\nexport const tableV2HeaderProps = buildProps({\n  class: String,\n  columns,\n  fixedHeaderData: {\n    type: definePropType<any[]>(Array),\n  },\n  headerData: {\n    type: definePropType<any[]>(Array),\n    required: true,\n  },\n  headerHeight: {\n    type: definePropType<number | number[]>([Number, Array]),\n    default: 50,\n  },\n  rowWidth: requiredNumberType,\n  rowHeight: {\n    type: Number,\n    default: 50,\n  },\n  height: requiredNumberType,\n  width: requiredNumberType,\n} as const)\n\nexport type TableV2HeaderProps = ExtractPropTypes<typeof tableV2HeaderProps>\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport {\n  virtualizedGridProps,\n  virtualizedListProps,\n} from '@element-plus/components/virtual-list'\nimport {\n  classType,\n  columns,\n  dataType,\n  fixedDataType,\n  requiredNumber,\n  styleType,\n} from './common'\nimport { tableV2HeaderProps } from './header'\nimport { tableV2RowProps } from './row'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { ItemSize } from '@element-plus/components/virtual-list'\n\nexport type onRowRenderedParams = {\n  rowCacheStart: number\n  rowCacheEnd: number\n  rowVisibleStart: number\n  rowVisibleEnd: number\n}\n\nexport const tableV2GridProps = buildProps({\n  columns,\n  data: dataType,\n  fixedData: fixedDataType,\n  estimatedRowHeight: tableV2RowProps.estimatedRowHeight,\n\n  /**\n   * Size related attributes\n   */\n  width: requiredNumber,\n  height: requiredNumber,\n\n  headerWidth: requiredNumber,\n  headerHeight: tableV2HeaderProps.headerHeight,\n\n  bodyWidth: requiredNumber,\n  rowHeight: requiredNumber,\n\n  /**\n   * Special attributes\n   */\n  cache: virtualizedListProps.cache,\n  useIsScrolling: Boolean,\n  scrollbarAlwaysOn: virtualizedGridProps.scrollbarAlwaysOn,\n  scrollbarStartGap: virtualizedGridProps.scrollbarStartGap,\n  scrollbarEndGap: virtualizedGridProps.scrollbarEndGap,\n\n  /**\n   * CSS attributes\n   */\n  class: classType,\n  style: styleType,\n  containerStyle: styleType,\n\n  getRowHeight: {\n    type: definePropType<ItemSize>(Function),\n    required: true,\n  },\n  rowKey: tableV2RowProps.rowKey,\n\n  /**\n   * Event handlers\n   */\n  onRowsRendered: {\n    type: definePropType<(params: onRowRenderedParams) => void>(Function),\n  },\n  onScroll: {\n    type: definePropType<(...args: any[]) => void>(Function),\n  },\n} as const)\n\nexport type TableV2GridProps = ExtractPropTypes<typeof tableV2GridProps>\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport {\n  virtualizedGridProps,\n  virtualizedScrollbarProps,\n} from '@element-plus/components/virtual-list'\nimport {\n  classType,\n  columns,\n  dataType,\n  expandKeys,\n  fixedDataType,\n  requiredNumber,\n  rowKey,\n} from './common'\nimport { tableV2RowProps } from './row'\nimport { tableV2HeaderProps } from './header'\nimport { tableV2GridProps } from './grid'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { SortOrder } from './constants'\nimport type {\n  Column,\n  ColumnCommonParams,\n  DataGetter,\n  KeyType,\n  RowCommonParams,\n  SortBy,\n  SortState,\n} from './types'\n\n/**\n * Param types\n */\nexport type ColumnSortParams<T> = {\n  column: Column<T>\n  key: KeyType\n  order: SortOrder\n}\n\n/**\n * Renderer/Getter types\n */\n\nexport type ExtraCellPropGetter<T> = (\n  params: ColumnCommonParams<T> &\n    RowCommonParams & { cellData: T; rowData: any }\n) => any\n\nexport type ExtractHeaderPropGetter<T> = (params: {\n  columns: Column<T>[]\n  headerIndex: number\n}) => any\n\nexport type ExtractHeaderCellPropGetter<T> = (\n  params: ColumnCommonParams<T> & { headerIndex: number }\n) => any\n\nexport type ExtractRowPropGetter<T> = (\n  params: { columns: Column<T>[] } & RowCommonParams\n) => any\n\nexport type HeaderClassNameGetter<T> = (params: {\n  columns: Column<T>[]\n  headerIndex: number\n}) => string\n\nexport type RowClassNameGetter<T> = (\n  params: { columns: Column<T>[] } & RowCommonParams\n) => string\n\n/**\n * Handler types\n */\nexport type ColumnSortHandler<T> = (params: ColumnSortParams<T>) => void\nexport type ColumnResizeHandler<T> = (column: Column<T>, width: number) => void\nexport type ExpandedRowsChangeHandler = (expandedRowKeys: KeyType[]) => void\n\nexport const tableV2Props = buildProps({\n  cache: tableV2GridProps.cache,\n  estimatedRowHeight: tableV2RowProps.estimatedRowHeight,\n  rowKey,\n  // Header attributes\n  headerClass: {\n    type: definePropType<string | HeaderClassNameGetter<any>>([\n      String,\n      Function,\n    ]),\n  },\n  headerProps: {\n    type: definePropType<any | ExtractHeaderPropGetter<any>>([\n      Object,\n      Function,\n    ]),\n  },\n  headerCellProps: {\n    type: definePropType<any | ExtractHeaderCellPropGetter<any>>([\n      Object,\n      Function,\n    ]),\n  },\n  headerHeight: tableV2HeaderProps.headerHeight,\n  /**\n   * Footer attributes\n   */\n  footerHeight: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * Row attributes\n   */\n  rowClass: {\n    type: definePropType<string | RowClassNameGetter<any>>([String, Function]),\n  },\n  rowProps: {\n    type: definePropType<ExtractRowPropGetter<any> | any>([Object, Function]),\n  },\n  rowHeight: {\n    type: Number,\n    default: 50,\n  },\n\n  /**\n   * Cell attributes\n   */\n  cellProps: {\n    type: definePropType<Record<string, any> | ExtraCellPropGetter<any>>([\n      Object,\n      Function,\n    ]),\n  },\n  /**\n   * Data models\n   */\n  columns,\n  data: dataType,\n  dataGetter: {\n    type: definePropType<DataGetter<any>>(Function),\n  },\n  fixedData: fixedDataType,\n  /**\n   * Expanded keys\n   */\n  expandColumnKey: tableV2RowProps.expandColumnKey,\n  expandedRowKeys: expandKeys,\n  defaultExpandedRowKeys: expandKeys,\n\n  /**\n   * Attributes\n   */\n  class: classType,\n  // disabled: Boolean,\n  fixed: Boolean,\n  style: {\n    type: definePropType<CSSProperties>(Object),\n  },\n  width: requiredNumber,\n  height: requiredNumber,\n  maxHeight: Number,\n  useIsScrolling: Boolean,\n  indentSize: {\n    type: Number,\n    default: 12,\n  },\n  iconSize: {\n    type: Number,\n    default: 12,\n  },\n  hScrollbarSize: virtualizedGridProps.hScrollbarSize,\n  vScrollbarSize: virtualizedGridProps.vScrollbarSize,\n  scrollbarAlwaysOn: virtualizedScrollbarProps.alwaysOn,\n\n  /**\n   * Sorting\n   */\n  sortBy: {\n    type: definePropType<SortBy>(Object),\n    default: () => ({} as { key: KeyType; order: SortOrder }),\n  },\n  sortState: {\n    type: definePropType<SortState>(Object),\n    default: undefined,\n  },\n\n  /**\n   * Handlers\n   */\n  onColumnSort: {\n    type: definePropType<ColumnSortHandler<any>>(Function),\n  },\n  onExpandedRowsChange: {\n    type: definePropType<ExpandedRowsChangeHandler>(Function),\n  },\n  onEndReached: {\n    type: definePropType<(distance: number) => void>(Function),\n  },\n  onRowExpand: tableV2RowProps.onRowExpand,\n  onScroll: tableV2GridProps.onScroll,\n  onRowsRendered: tableV2GridProps.onRowsRendered,\n  rowEventHandlers: tableV2RowProps.rowEventHandlers,\n} as const)\n\nexport type TableV2Props = ExtractPropTypes<typeof tableV2Props>\n", "import type { FunctionalComponent } from 'vue'\nimport type { TableV2CellProps } from '../cell'\n\nconst TableV2Cell: FunctionalComponent<TableV2CellProps> = (\n  props: TableV2CellProps,\n  { slots }\n) => {\n  const { cellData, style } = props\n  const displayText = cellData?.toString?.() || ''\n  return (\n    <div class={props.class} title={displayText} style={style}>\n      {slots.default ? slots.default(props) : displayText}\n    </div>\n  )\n}\n\nTableV2Cell.displayName = 'ElTableV2Cell'\nTableV2Cell.inheritAttrs = false\n\nexport default TableV2Cell\n", "import type { FunctionalComponent } from 'vue'\nimport type { TableV2HeaderCell } from '../header-cell'\n\nconst HeaderCell: FunctionalComponent<TableV2HeaderCell> = (props, { slots }) =>\n  slots.default ? (\n    slots.default(props)\n  ) : (\n    <div class={props.class} title={props.column?.title}>\n      {props.column?.title}\n    </div>\n  )\n\nHeaderCell.displayName = 'ElTableV2HeaderCell'\nHeaderCell.inheritAttrs = false\n\nexport default HeaderCell\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport { columns } from './common'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { KeyType } from './types'\n\nexport const tableV2HeaderRowProps = buildProps({\n  class: String,\n  columns,\n  columnsStyles: {\n    type: definePropType<Record<KeyType, CSSProperties>>(Object),\n    required: true,\n  },\n  headerIndex: Number,\n  style: { type: definePropType<CSSProperties>(Object) },\n} as const)\n\nexport type TableV2HeaderRowProps = ExtractPropTypes<\n  typeof tableV2HeaderRowProps\n>\n", "import { defineComponent } from 'vue'\nimport { isArray } from '@element-plus/utils'\nimport { tableV2HeaderRowProps } from '../header-row'\n\nimport type { CSSProperties } from 'vue'\nimport type { ColumnCellsType } from '../types'\nimport type { TableV2HeaderRowProps } from '../header-row'\n\nconst TableV2HeaderRow = defineComponent({\n  name: 'ElTableV2HeaderRow',\n  props: tableV2HeaderRowProps,\n  setup(props, { slots }) {\n    return () => {\n      const { columns, columnsStyles, headerIndex, style } = props\n      let Cells: ColumnCellsType = columns.map((column, columnIndex) => {\n        return slots.cell!({\n          columns,\n          column,\n          columnIndex,\n          headerIndex,\n          style: columnsStyles[column.key],\n        })\n      })\n\n      if (slots.header) {\n        Cells = slots.header({\n          cells: Cells.map((node) => {\n            if (isArray(node) && node.length === 1) {\n              return node[0]\n            }\n            return node\n          }),\n          columns,\n          headerIndex,\n        })\n      }\n\n      return (\n        <div class={props.class} style={style}>\n          {Cells}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2HeaderRow\n\nexport type TableV2HeaderRowCellRendererParams = {\n  columns: TableV2HeaderRowProps['columns']\n  column: TableV2HeaderRowProps['columns'][number]\n  columnIndex: number\n  headerIndex: number\n  style: CSSProperties\n}\n\nexport type TableV2HeaderRowRendererParams = {\n  cells: ColumnCellsType\n  columns: TableV2HeaderRowProps['columns']\n  headerIndex: number\n}\n", "import { computed, defineComponent, nextTick, ref, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { ensureArray } from '@element-plus/utils'\nimport { tableV2HeaderProps } from '../header'\nimport { enforceUnit } from '../utils'\n\nimport type { CSSProperties, UnwrapRef } from 'vue'\nimport type { TableV2HeaderProps } from '../header'\nimport type { UseColumnsReturn } from '../composables/use-columns'\n\nconst COMPONENT_NAME = 'ElTableV2Header'\nconst TableV2Header = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2HeaderProps,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const headerRef = ref<HTMLElement>()\n\n    const headerStyle = computed(() =>\n      enforceUnit({\n        width: props.width,\n        height: props.height,\n      })\n    )\n\n    const rowStyle = computed(() =>\n      enforceUnit({\n        width: props.rowWidth,\n        height: props.height,\n      })\n    )\n\n    const headerHeights = computed(() => ensureArray(unref(props.headerHeight)))\n\n    const scrollToLeft = (left?: number) => {\n      const headerEl = unref(headerRef)\n      nextTick(() => {\n        headerEl?.scroll &&\n          headerEl.scroll({\n            left,\n          })\n      })\n    }\n\n    const renderFixedRows = () => {\n      const fixedRowClassName = ns.e('fixed-header-row')\n\n      const { columns, fixedHeaderData, rowHeight } = props\n\n      return fixedHeaderData?.map((fixedRowData, fixedRowIndex) => {\n        const style: CSSProperties = enforceUnit({\n          height: rowHeight,\n          width: '100%',\n        })\n\n        return slots.fixed?.({\n          class: fixedRowClassName,\n          columns,\n          rowData: fixedRowData,\n          rowIndex: -(fixedRowIndex + 1),\n          style,\n        })\n      })\n    }\n\n    const renderDynamicRows = () => {\n      const dynamicRowClassName = ns.e('dynamic-header-row')\n      const { columns } = props\n\n      return unref(headerHeights).map((rowHeight, rowIndex) => {\n        const style: CSSProperties = enforceUnit({\n          width: '100%',\n          height: rowHeight,\n        })\n\n        return slots.dynamic?.({\n          class: dynamicRowClassName,\n          columns,\n          headerIndex: rowIndex,\n          style,\n        })\n      })\n    }\n\n    expose({\n      /**\n       * @description scroll to position based on the provided value\n       */\n      scrollToLeft,\n    })\n\n    return () => {\n      if (props.height <= 0) return\n\n      return (\n        <div ref={headerRef} class={props.class} style={unref(headerStyle)}>\n          <div style={unref(rowStyle)} class={ns.e('header')}>\n            {renderDynamicRows()}\n            {renderFixedRows()}\n          </div>\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2Header\n\nexport type TableV2HeaderInstance = InstanceType<typeof TableV2Header> & {\n  /**\n   * @description scroll to position based on the provided value\n   */\n  scrollToLeft: (left?: number) => void\n}\n\nexport type TableV2HeaderRendererParams = {\n  class: string\n  columns: TableV2HeaderProps['columns']\n  columnsStyles: UnwrapRef<UseColumnsReturn['columnsStyles']>\n  headerIndex: number\n  style: CSSProperties\n}\n\nexport type TableV2HeaderRowRendererParams = {\n  rowData: any\n  rowIndex: number\n} & Omit<TableV2HeaderRendererParams, 'headerIndex'>\n", "import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  unref,\n} from 'vue'\nimport { isArray, isFunction, isNumber } from '@element-plus/utils'\nimport { tableV2RowProps } from '../row'\nimport { TableV2InjectionKey } from '../tokens'\nimport { placeholderSign } from '../private'\n\nimport type { CSSProperties, RendererElement, RendererNode, VNode } from 'vue'\nimport type { RowEventHandlers, TableV2RowProps } from '../row'\n\ntype CustomizedCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[]\n\ntype DefaultCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[][]\n\ntype ColumnCellsType = DefaultCellsType | CustomizedCellsType\n\nconst useTableRow = (props: TableV2RowProps) => {\n  const { isScrolling } = inject(TableV2InjectionKey)!\n\n  const measured = ref(false)\n  const rowRef = ref<HTMLElement>()\n  const measurable = computed(() => {\n    return isNumber(props.estimatedRowHeight) && props.rowIndex >= 0\n  })\n\n  const doMeasure = (isInit = false) => {\n    const $rowRef = unref(rowRef)\n    if (!$rowRef) return\n    const { columns, onRowHeightChange, rowKey, rowIndex, style } = props\n    const { height } = $rowRef.getBoundingClientRect()\n    measured.value = true\n\n    nextTick(() => {\n      if (isInit || height !== Number.parseInt(style!.height as string)) {\n        const firstColumn = columns[0]\n        const isPlaceholder = firstColumn?.placeholderSign === placeholderSign\n        onRowHeightChange?.(\n          { rowKey, height, rowIndex },\n          firstColumn && !isPlaceholder && firstColumn.fixed\n        )\n      }\n    })\n  }\n\n  const eventHandlers = computed(() => {\n    const { rowData, rowIndex, rowKey, onRowHover } = props\n    const handlers = props.rowEventHandlers || ({} as RowEventHandlers)\n    const eventHandlers = {} as {\n      [key in keyof RowEventHandlers]: (e: Event) => void\n    }\n\n    Object.entries(handlers).forEach(([eventName, handler]) => {\n      if (isFunction(handler)) {\n        eventHandlers[eventName as keyof RowEventHandlers] = (event: Event) => {\n          handler({\n            event,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n        }\n      }\n    })\n\n    if (onRowHover) {\n      ;(\n        [\n          { name: 'onMouseleave', hovered: false },\n          { name: 'onMouseenter', hovered: true },\n        ] as const\n      ).forEach(({ name, hovered }) => {\n        const existedHandler = eventHandlers[name]\n        eventHandlers[name] = ((event: MouseEvent) => {\n          onRowHover({\n            event,\n            hovered,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n\n          existedHandler?.(event)\n        }) as any\n      })\n    }\n    return eventHandlers\n  })\n\n  const onExpand = (expanded: boolean) => {\n    const { onRowExpand, rowData, rowIndex, rowKey } = props\n\n    onRowExpand?.({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey,\n    })\n  }\n\n  onMounted(() => {\n    if (unref(measurable)) {\n      doMeasure(true)\n    }\n  })\n\n  return { isScrolling, measurable, measured, rowRef, eventHandlers, onExpand }\n}\n\nconst COMPONENT_NAME = 'ElTableV2TableRow'\n\nconst TableV2Row = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2RowProps,\n  setup(props, { expose, slots, attrs }) {\n    const {\n      eventHandlers,\n      isScrolling,\n      measurable,\n      measured,\n      rowRef,\n\n      onExpand,\n    } = useTableRow(props)\n\n    expose({\n      /**\n       * @description manually dispatching expand action on row.\n       */\n      onExpand,\n    })\n\n    return () => {\n      const {\n        columns,\n        columnsStyles,\n        expandColumnKey,\n        depth,\n        rowData,\n        rowIndex,\n        style,\n      } = props\n\n      let ColumnCells: ColumnCellsType = columns.map((column, columnIndex) => {\n        const expandable =\n          isArray(rowData.children) &&\n          rowData.children.length > 0 &&\n          column.key === expandColumnKey\n\n        return slots.cell!({\n          column,\n          columns,\n          columnIndex,\n          depth,\n          style: columnsStyles[column.key],\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n          expandIconProps: expandable\n            ? {\n                rowData,\n                rowIndex,\n                onExpand,\n              }\n            : undefined,\n        })\n      })\n\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map((node) => {\n            if (isArray(node) && node.length === 1) {\n              return node[0]\n            }\n            return node\n          }),\n          style,\n          columns,\n          depth,\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n        })\n      }\n\n      if (unref(measurable)) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { height, ...exceptHeightStyle } = style || {}\n        const _measured = unref(measured)\n        return (\n          <div\n            ref={rowRef}\n            class={props.class}\n            style={_measured ? style : exceptHeightStyle}\n            {...attrs}\n            {...unref(eventHandlers)}\n          >\n            {ColumnCells}\n          </div>\n        )\n      }\n\n      return (\n        <div\n          {...attrs}\n          ref={rowRef}\n          class={props.class}\n          style={style}\n          {...unref(eventHandlers)}\n        >\n          {ColumnCells}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2Row\n\nexport type TableV2RowCellRenderParam = {\n  column: TableV2RowProps['columns'][number]\n  columns: TableV2RowProps['columns']\n  columnIndex: number\n  depth: number\n  style: CSSProperties\n  rowData: any\n  rowIndex: number\n  isScrolling: boolean\n  expandIconProps?: {\n    rowData: any\n    rowIndex: number\n    onExpand: (expand: boolean) => void\n  }\n}\n", "import ElIcon from '@element-plus/components/icon'\nimport { SortDown, SortUp } from '@element-plus/icons-vue'\nimport { SortOrder } from '../constants'\n\nimport type { FunctionalComponent } from 'vue'\n\nexport type SortIconProps = {\n  sortOrder: SortOrder\n  class?: JSX.IntrinsicAttributes['class']\n}\n\nconst SortIcon: FunctionalComponent<SortIconProps> = (props) => {\n  const { sortOrder } = props\n\n  return (\n    <ElIcon size={14} class={props.class}>\n      {sortOrder === SortOrder.ASC ? <SortUp /> : <SortDown />}\n    </ElIcon>\n  )\n}\n\nexport default SortIcon\n", "import ElIcon from '@element-plus/components/icon'\nimport { ArrowRight } from '@element-plus/icons-vue'\n\nimport type { StyleValue } from 'vue'\nimport type { TableV2RowCellRenderParam } from './row'\n\nconst ExpandIcon = (\n  props: TableV2RowCellRenderParam['expandIconProps'] & {\n    class?: string | string[]\n    style: StyleValue\n    size: number\n    expanded: boolean\n    expandable: boolean\n  }\n) => {\n  const { expanded, expandable, onExpand, style, size } = props\n\n  const expandIconProps = {\n    onClick: expandable ? () => onExpand(!expanded) : undefined,\n    class: props.class,\n  } as any\n\n  return (\n    <ElIcon {...expandIconProps} size={size} style={style}>\n      <ArrowRight />\n    </ElIcon>\n  )\n}\n\nexport default ExpandIcon\n\nexport type ExpandIconInstance = ReturnType<typeof ExpandIcon>\n", "import { computed, defineComponent, inject, ref, unref } from 'vue'\nimport {\n  DynamicSizeGrid,\n  FixedSizeGrid,\n} from '@element-plus/components/virtual-list'\nimport { isNumber, isObject } from '@element-plus/utils'\nimport { Header } from './components'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2GridProps } from './grid'\nimport { sum } from './utils'\n\nimport type { UnwrapRef } from 'vue'\nimport type {\n  DynamicSizeGridInstance,\n  GridDefaultSlotParams,\n  GridItemKeyGetter,\n  GridItemRenderedEvtParams,\n  GridScrollOptions,\n  ResetAfterIndex,\n  Alignment as ScrollStrategy,\n} from '@element-plus/components/virtual-list'\nimport type { TableV2HeaderInstance } from './components'\nimport type { TableV2GridProps } from './grid'\n\nconst COMPONENT_NAME = 'ElTableV2Grid'\n\nconst useTableGrid = (props: TableV2GridProps) => {\n  const headerRef = ref<TableV2HeaderInstance>()\n  const bodyRef = ref<DynamicSizeGridInstance>()\n\n  const totalHeight = computed(() => {\n    const { data, rowHeight, estimatedRowHeight } = props\n\n    if (estimatedRowHeight) {\n      return\n    }\n\n    return data.length * (rowHeight as number)\n  })\n\n  const fixedRowHeight = computed(() => {\n    const { fixedData, rowHeight } = props\n\n    return (fixedData?.length || 0) * (rowHeight as number)\n  })\n\n  const headerHeight = computed(() => sum(props.headerHeight))\n\n  const gridHeight = computed(() => {\n    const { height } = props\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight))\n  })\n\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0\n  })\n\n  const itemKey: GridItemKeyGetter = ({ data, rowIndex }) =>\n    data[rowIndex][props.rowKey]\n\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd,\n  }: GridItemRenderedEvtParams) {\n    props.onRowsRendered?.({\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd,\n    })\n  }\n\n  function resetAfterRowIndex(index: number, forceUpdate: boolean) {\n    bodyRef.value?.resetAfterRowIndex(index, forceUpdate)\n  }\n\n  function scrollTo(x: number, y: number): void\n  function scrollTo(options: GridScrollOptions): void\n  function scrollTo(leftOrOptions: number | GridScrollOptions, top?: number) {\n    const header$ = unref(headerRef)\n    const body$ = unref(bodyRef)\n\n    if (!header$ || !body$) return\n\n    if (isObject(leftOrOptions)) {\n      header$.scrollToLeft(leftOrOptions.scrollLeft)\n      body$.scrollTo(leftOrOptions)\n    } else {\n      header$.scrollToLeft(leftOrOptions)\n      body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top,\n      })\n    }\n  }\n\n  function scrollToTop(scrollTop: number) {\n    unref(bodyRef)?.scrollTo({\n      scrollTop,\n    })\n  }\n\n  function scrollToRow(row: number, strategy: ScrollStrategy) {\n    unref(bodyRef)?.scrollToItem(row, 1, strategy)\n  }\n\n  function forceUpdate() {\n    unref(bodyRef)?.$forceUpdate()\n    unref(headerRef)?.$forceUpdate()\n  }\n\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow,\n  }\n}\n\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, { slots, expose }) {\n    const { ns } = inject(TableV2InjectionKey)!\n\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n    } = useTableGrid(props)\n\n    expose({\n      forceUpdate,\n      /**\n       * @description fetch total height\n       */\n      totalHeight,\n      /**\n       * @description scroll to a position\n       */\n      scrollTo,\n      /**\n       * @description scroll vertically to position y\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n      /**\n       * @description reset rendered state after row index\n       */\n      resetAfterRowIndex,\n    })\n\n    const getColumnWidth = () => props.bodyWidth\n\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n\n        getRowHeight,\n        onScroll,\n      } = props\n\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight)\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid\n      const _headerHeight = unref(headerHeight)\n\n      return (\n        <div role=\"table\" class={[ns.e('table'), props.class]} style={style}>\n          <Grid\n            ref={bodyRef}\n            // special attrs\n            data={data}\n            useIsScrolling={useIsScrolling}\n            itemKey={itemKey}\n            // column attrs\n            columnCache={0}\n            columnWidth={isDynamicRowEnabled ? getColumnWidth : bodyWidth}\n            totalColumn={1}\n            // row attrs\n            totalRow={data.length}\n            rowCache={cache}\n            rowHeight={isDynamicRowEnabled ? getRowHeight : rowHeight}\n            // DOM attrs\n            width={width}\n            height={unref(gridHeight)}\n            class={ns.e('body')}\n            scrollbarStartGap={scrollbarStartGap}\n            scrollbarEndGap={scrollbarEndGap}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            // handlers\n            onScroll={onScroll}\n            onItemRendered={onItemRendered}\n            perfMode={false}\n          >\n            {{\n              default: (params: GridDefaultSlotParams) => {\n                const rowData = data[params.rowIndex]\n                return slots.row?.({\n                  ...params,\n                  columns,\n                  rowData,\n                })\n              },\n            }}\n          </Grid>\n          {unref(hasHeader) && (\n            <Header\n              ref={headerRef}\n              class={ns.e('header-wrapper')}\n              columns={columns}\n              headerData={data}\n              headerHeight={props.headerHeight}\n              fixedHeaderData={fixedData}\n              rowWidth={headerWidth}\n              rowHeight={rowHeight}\n              width={width}\n              height={Math.min(_headerHeight + unref(fixedRowHeight), height)}\n            >\n              {{\n                dynamic: slots.header,\n                fixed: slots.row,\n              }}\n            </Header>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableGrid\n\nexport type TableGridRowSlotParams = {\n  columns: TableV2GridProps['columns']\n  rowData: any\n} & GridDefaultSlotParams\n\nexport type TableGridInstance = InstanceType<typeof TableGrid> &\n  UnwrapRef<{\n    forceUpdate: () => void\n    /**\n     * @description fetch total height\n     */\n    totalHeight: number\n\n    /**\n     * @description scrollTo a position\n     * @param { number | ScrollToOptions } arg1\n     * @param { number } arg2\n     */\n    scrollTo(leftOrOptions: number | GridScrollOptions, top?: number): void\n\n    /**\n     * @description scroll vertically to position y\n     */\n    scrollToTop(scrollTop: number): void\n    /**\n     * @description scroll to a given row\n     * @params row {Number} which row to scroll to\n     * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n     */\n    scrollToRow(row: number, strategy: ScrollStrategy): void\n    /**\n     * @description reset rendered state after row index\n     * @param { number } rowIndex\n     * @param { boolean } forceUpdate\n     */\n    resetAfterRowIndex: ResetAfterIndex\n  }>\n", "import Table from '../table-grid'\n\nimport type { FunctionalComponent, Ref } from 'vue'\nimport type { TableV2GridProps } from '../grid'\nimport type { TableGridInstance } from '../table-grid'\n\nexport type MainTableRendererProps = TableV2GridProps & {\n  mainTableRef: Ref<TableGridInstance | undefined>\n}\n\nconst MainTable: FunctionalComponent<MainTableRendererProps> = (\n  props: MainTableRendererProps,\n  { slots }\n) => {\n  const { mainTableRef, ...rest } = props\n  return (\n    <Table ref={mainTableRef} {...rest}>\n      {slots}\n    </Table>\n  )\n}\n\nexport default MainTable\n", "import Table from '../table-grid'\n\nimport type { FunctionalComponent, Ref } from 'vue'\nimport type { TableV2GridProps } from '../grid'\nimport type { TableGridInstance } from '../table-grid'\n\ntype LeftTableProps = TableV2GridProps & {\n  leftTableRef: Ref<TableGridInstance | undefined>\n}\n\nconst LeftTable: FunctionalComponent<LeftTableProps> = (props, { slots }) => {\n  if (!props.columns.length) return\n\n  const { leftTableRef, ...rest } = props\n\n  return (\n    <Table ref={leftTableRef} {...rest}>\n      {slots}\n    </Table>\n  )\n}\n\nexport default LeftTable\n", "import Table from '../table-grid'\n\nimport type { FunctionalComponent, Ref } from 'vue'\nimport type { TableV2GridProps } from '../grid'\nimport type { TableGridInstance } from '../table-grid'\n\ntype LeftTableProps = TableV2GridProps & {\n  rightTableRef: Ref<TableGridInstance | undefined>\n}\n\nconst LeftTable: FunctionalComponent<LeftTableProps> = (props, { slots }) => {\n  if (!props.columns.length) return\n\n  const { rightTableRef, ...rest } = props\n\n  return (\n    <Table ref={rightTableRef} {...rest}>\n      {slots}\n    </Table>\n  )\n}\n\nexport default LeftTable\n", "import { Row } from '../components'\nimport { tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\nimport type { TableGridRowSlotParams } from '../table-grid'\n\ntype RowRendererProps = TableGridRowSlotParams &\n  Pick<\n    TableV2Props,\n    | 'expandColumnKey'\n    | 'estimatedRowHeight'\n    | 'rowProps'\n    | 'rowClass'\n    | 'rowKey'\n    | 'rowEventHandlers'\n  > &\n  UnwrapNestedRefs<\n    Pick<\n      UseTableReturn,\n      | 'depthMap'\n      | 'expandedRowKeys'\n      | 'hasFixedColumns'\n      | 'hoveringRowKey'\n      | 'onRowHovered'\n      | 'onRowExpanded'\n      | 'columnsStyles'\n    >\n  > & {\n    ns: UseNamespaceReturn\n  }\n\nconst RowRenderer: FunctionalComponent<RowRendererProps> = (\n  props,\n  { slots }\n) => {\n  const {\n    columns,\n    columnsStyles,\n    depthMap,\n    expandColumnKey,\n    expandedRowKeys,\n    estimatedRowHeight,\n    hasFixedColumns,\n    hoveringRowKey,\n    rowData,\n    rowIndex,\n    style,\n    isScrolling,\n    rowProps,\n    rowClass,\n    rowKey,\n    rowEventHandlers,\n    ns,\n    onRowHovered,\n    onRowExpanded,\n  } = props\n\n  const rowKls = tryCall(rowClass, { columns, rowData, rowIndex }, '')\n  const additionalProps = tryCall(rowProps, {\n    columns,\n    rowData,\n    rowIndex,\n  })\n  const _rowKey = rowData[rowKey]\n  const depth = depthMap[_rowKey] || 0\n  const canExpand = Boolean(expandColumnKey)\n  const isFixedRow = rowIndex < 0\n  const kls = [\n    ns.e('row'),\n    rowKls,\n    {\n      [ns.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,\n      [ns.is('expanded')]: canExpand && expandedRowKeys.includes(_rowKey),\n      [ns.is('hovered')]: !isScrolling && _rowKey === hoveringRowKey,\n      [ns.is('fixed')]: !depth && isFixedRow,\n      [ns.is('customized')]: Boolean(slots.row),\n    },\n  ]\n\n  const onRowHover = hasFixedColumns ? onRowHovered : undefined\n\n  const _rowProps = {\n    ...additionalProps,\n    columns,\n    columnsStyles,\n    class: kls,\n    depth,\n    expandColumnKey,\n    estimatedRowHeight: isFixedRow ? undefined : estimatedRowHeight,\n    isScrolling,\n    rowIndex,\n    rowData,\n    rowKey: _rowKey,\n    rowEventHandlers,\n    style,\n  }\n\n  return (\n    <Row {..._rowProps} onRowHover={onRowHover} onRowExpand={onRowExpanded}>\n      {slots}\n    </Row>\n  )\n}\n\nexport default RowRenderer\n", "import { get } from 'lodash-unified'\nimport { isFunction, isObject } from '@element-plus/utils'\nimport { ExpandIcon, TableCell } from '../components'\nimport { Alignment } from '../constants'\nimport { placeholderSign } from '../private'\nimport { componentToSlot, enforceUnit, tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs, VNode } from 'vue'\nimport type { CellRendererParams } from '../types'\nimport type { TableV2RowCellRenderParam } from '../components'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\n\ntype CellRendererProps = TableV2RowCellRenderParam &\n  Pick<\n    TableV2Props,\n    'cellProps' | 'expandColumnKey' | 'indentSize' | 'iconSize' | 'rowKey'\n  > &\n  UnwrapNestedRefs<Pick<UseTableReturn, 'expandedRowKeys'>> & {\n    ns: UseNamespaceReturn\n  }\n\nconst CellRenderer: FunctionalComponent<CellRendererProps> = (\n  {\n    // renderer props\n    columns,\n    column,\n    columnIndex,\n    depth,\n    expandIconProps,\n    isScrolling,\n    rowData,\n    rowIndex,\n    // from use-table\n    style,\n    expandedRowKeys,\n    ns,\n    // derived props\n    cellProps: _cellProps,\n    expandColumnKey,\n    indentSize,\n    iconSize,\n    rowKey,\n  },\n  { slots }\n) => {\n  const cellStyle = enforceUnit(style)\n\n  if (column.placeholderSign === placeholderSign) {\n    return <div class={ns.em('row-cell', 'placeholder')} style={cellStyle} />\n  }\n  const { cellRenderer, dataKey, dataGetter } = column\n\n  const columnCellRenderer = componentToSlot(cellRenderer)\n\n  const CellComponent =\n    columnCellRenderer ||\n    slots.default ||\n    ((props: CellRendererParams<any>) => <TableCell {...props} />)\n\n  const cellData = isFunction(dataGetter)\n    ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n    : get(rowData, dataKey ?? '')\n\n  const extraCellProps = tryCall(_cellProps, {\n    cellData,\n    columns,\n    column,\n    columnIndex,\n    rowIndex,\n    rowData,\n  })\n\n  const cellProps = {\n    class: ns.e('cell-text'),\n    columns,\n    column,\n    columnIndex,\n    cellData,\n    isScrolling,\n    rowData,\n    rowIndex,\n  }\n\n  const Cell = CellComponent(cellProps)\n\n  const kls = [\n    ns.e('row-cell'),\n    column.align === Alignment.CENTER && ns.is('align-center'),\n    column.align === Alignment.RIGHT && ns.is('align-right'),\n  ]\n\n  const expandable = rowIndex >= 0 && column.key === expandColumnKey\n  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey])\n\n  let IconOrPlaceholder: VNode | undefined\n  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`\n  if (expandable) {\n    if (isObject(expandIconProps)) {\n      IconOrPlaceholder = (\n        <ExpandIcon\n          {...expandIconProps}\n          class={[ns.e('expand-icon'), ns.is('expanded', expanded)]}\n          size={iconSize}\n          expanded={expanded}\n          style={iconStyle}\n          expandable\n        />\n      )\n    } else {\n      IconOrPlaceholder = (\n        <div\n          style={[\n            iconStyle,\n            `width: ${iconSize}px; height: ${iconSize}px;`,\n          ].join(' ')}\n        />\n      )\n    }\n  }\n\n  return (\n    <div class={kls} style={cellStyle} {...extraCellProps}>\n      {IconOrPlaceholder}\n      {Cell}\n    </div>\n  )\n}\n\nCellRenderer.inheritAttrs = false\n\nexport default CellRenderer\n", "import { HeaderRow } from '../components'\nimport { tryCall } from '../utils'\n\nimport type { FunctionalComponent } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { TableV2HeaderRendererParams } from '../components'\nimport type { TableV2Props } from '../table'\n\ntype HeaderRendererProps = TableV2HeaderRendererParams &\n  Pick<TableV2Props, 'headerClass' | 'headerProps'> & {\n    ns: UseNamespaceReturn\n  }\n\nconst HeaderRenderer: FunctionalComponent<HeaderRendererProps> = (\n  {\n    columns,\n    columnsStyles,\n    headerIndex,\n    style,\n    // derived from root\n    headerClass,\n    headerProps,\n\n    ns,\n  },\n  { slots }\n) => {\n  const param = { columns, headerIndex }\n\n  const kls = [\n    ns.e('header-row'),\n    tryCall(headerClass, param, ''),\n    {\n      // [ns.is('resizing')]: Boolean(resizingKey),\n      [ns.is('customized')]: Boolean(slots.header),\n    },\n  ]\n\n  const extraProps = {\n    ...tryCall(headerProps, param),\n    columnsStyles,\n    class: kls,\n    columns,\n    headerIndex,\n    style,\n  }\n\n  return <HeaderRow {...extraProps}>{slots}</HeaderRow>\n}\n\nexport default HeaderRenderer\n", "import { HeaderCell, SortIcon } from '../components'\n// import ColumnResizer from '../table-column-resizer'\nimport { Alignment, SortOrder, oppositeOrderMap } from '../constants'\nimport { placeholderSign } from '../private'\nimport { componentToSlot, enforceUnit, tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { TableV2HeaderRowCellRendererParams } from '../components'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\nimport type { TableV2HeaderCell } from '../header-cell'\n\nexport type HeaderCellRendererProps = TableV2HeaderRowCellRendererParams &\n  UnwrapNestedRefs<Pick<UseTableReturn, 'onColumnSorted'>> &\n  Pick<TableV2Props, 'sortBy' | 'sortState' | 'headerCellProps'> & {\n    ns: UseNamespaceReturn\n  }\n\nconst HeaderCellRenderer: FunctionalComponent<HeaderCellRendererProps> = (\n  props,\n  { slots }\n) => {\n  const { column, ns, style, onColumnSorted } = props\n\n  const cellStyle = enforceUnit(style)\n\n  if (column.placeholderSign === placeholderSign) {\n    return (\n      <div class={ns.em('header-row-cell', 'placeholder')} style={cellStyle} />\n    )\n  }\n\n  const { headerCellRenderer, headerClass, sortable } = column\n\n  /**\n   * render Cell children\n   */\n\n  const cellProps = {\n    ...props,\n    class: ns.e('header-cell-text'),\n  }\n\n  const cellRenderer =\n    componentToSlot<typeof cellProps>(headerCellRenderer) ||\n    slots.default ||\n    ((props: TableV2HeaderCell) => <HeaderCell {...props} />)\n\n  const Cell = cellRenderer(cellProps)\n\n  /**\n   * Render cell container and sort indicator\n   */\n  const { sortBy, sortState, headerCellProps } = props\n\n  let sorting: boolean, sortOrder: SortOrder\n  if (sortState) {\n    const order = sortState[column.key]\n    sorting = Boolean(oppositeOrderMap[order])\n    sortOrder = sorting ? order : SortOrder.ASC\n  } else {\n    sorting = column.key === sortBy.key\n    sortOrder = sorting ? sortBy.order : SortOrder.ASC\n  }\n\n  const cellKls = [\n    ns.e('header-cell'),\n    tryCall(headerClass, props, ''),\n    column.align === Alignment.CENTER && ns.is('align-center'),\n    column.align === Alignment.RIGHT && ns.is('align-right'),\n    sortable && ns.is('sortable'),\n  ]\n\n  const cellWrapperProps = {\n    ...tryCall(headerCellProps, props),\n    onClick: column.sortable ? onColumnSorted : undefined,\n    class: cellKls,\n    style: cellStyle,\n    ['data-key']: column.key,\n  }\n\n  // For now we don't deliver resizable column feature since it has some UX issue.\n  return (\n    <div {...cellWrapperProps}>\n      {Cell}\n\n      {sortable && (\n        <SortIcon\n          class={[ns.e('sort-icon'), sorting && ns.is('sorting')]}\n          sortOrder={sortOrder}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default HeaderCellRenderer\nexport type HeaderCellSlotProps = HeaderCellRendererProps & { class: string }\n", "import type { CSSProperties, FunctionalComponent } from 'vue'\n\ntype FooterRendererProps = {\n  class?: JSX.IntrinsicAttributes['class']\n  style: CSSProperties\n}\n\nconst Footer: FunctionalComponent<FooterRendererProps> = (props, { slots }) => {\n  return (\n    <div class={props.class} style={props.style}>\n      {slots.default?.()}\n    </div>\n  )\n}\n\nFooter.displayName = 'ElTableV2Footer'\n\nexport default Footer\n", "import ElEmpty from '@element-plus/components/empty'\nimport type { CSSProperties, FunctionalComponent } from 'vue'\n\ntype EmptyRendererProps = {\n  class?: JSX.IntrinsicAttributes['class']\n  style?: CSSProperties\n}\n\nconst Footer: FunctionalComponent<EmptyRendererProps> = (props, { slots }) => {\n  return (\n    <div class={props.class} style={props.style}>\n      {slots.default ? slots.default() : <ElEmpty />}\n    </div>\n  )\n}\n\nFooter.displayName = 'ElTableV2Empty'\n\nexport default Footer\n", "import type { SimpleFunctionalComponent } from '../types'\n\nconst Overlay: SimpleFunctionalComponent = (props, { slots }) => {\n  return (\n    <div class={props.class} style={props.style}>\n      {slots.default?.()}\n    </div>\n  )\n}\n\nOverlay.displayName = 'ElTableV2Overlay'\n\nexport default Overlay\n", "// @ts-nocheck\nimport { defineComponent, provide, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useTable } from './use-table'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2Props } from './table'\n// renderers\nimport MainTable from './renderers/main-table'\nimport LeftTable from './renderers/left-table'\nimport RightTable from './renderers/right-table'\nimport Row from './renderers/row'\nimport Cell from './renderers/cell'\nimport Header from './renderers/header'\nimport HeaderCell from './renderers/header-cell'\nimport Footer from './renderers/footer'\nimport Empty from './renderers/empty'\nimport Overlay from './renderers/overlay'\n\nimport type { TableGridRowSlotParams } from './table-grid'\nimport type { ScrollStrategy } from './composables/use-scrollbar'\nimport type {\n  TableV2HeaderRendererParams,\n  TableV2HeaderRowCellRendererParams,\n  TableV2RowCellRenderParam,\n} from './components'\n\nconst COMPONENT_NAME = 'ElTableV2'\n\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n\n      showEmpty,\n\n      // exposes\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll,\n    } = useTable(props)\n\n    expose({\n      /**\n       * @description scroll to a given position\n       * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n       */\n      scrollTo,\n      /**\n       * @description scroll to a given position horizontally\n       * @params scrollLeft {Number} where to scroll to.\n       */\n      scrollToLeft,\n      /**\n       * @description scroll to a given position vertically\n       * @params scrollTop { Number } where to scroll to.\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n    })\n\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling,\n    })\n\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width,\n      } = props\n\n      const _data = unref(data)\n\n      const mainTableProps = {\n        cache,\n        class: ns.e('main'),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll,\n      }\n\n      const leftColumnsWidth = unref(leftTableWidth)\n      const _fixedTableHeight = unref(fixedTableHeight)\n\n      const leftTableProps = {\n        cache,\n        class: ns.e('left'),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n\n      const rightColumnsWidth = unref(rightTableWidth)\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize\n\n      const rightTableProps = {\n        cache,\n        class: ns.e('right'),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(\n          ns.namespace\n        )}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n      const _columnsStyles = unref(columnsStyles)\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange,\n      }\n\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns,\n      }\n\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles,\n      }\n\n      const tableHeaderCellProps = {\n        ns,\n\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted,\n      }\n\n      const tableSlots = {\n        row: (props: TableGridRowSlotParams) => (\n          <Row {...props} {...tableRowProps}>\n            {{\n              row: slots.row,\n              cell: (props: TableV2RowCellRenderParam) =>\n                slots.cell ? (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots.cell(props)}\n                  </Cell>\n                ) : (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Row>\n        ),\n        header: (props: TableV2HeaderRendererParams) => (\n          <Header {...props} {...tableHeaderProps}>\n            {{\n              header: slots.header,\n              cell: (props: TableV2HeaderRowCellRendererParams) =>\n                slots['header-cell'] ? (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots['header-cell'](props)}\n                  </HeaderCell>\n                ) : (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Header>\n        ),\n      }\n\n      const rootKls = [\n        props.class,\n        ns.b(),\n        ns.e('root'),\n        {\n          [ns.is('dynamic')]: unref(isDynamic),\n        },\n      ]\n\n      const footerProps = {\n        class: ns.e('footer'),\n        style: unref(footerHeight),\n      }\n\n      return (\n        <div class={rootKls} style={unref(rootStyle)}>\n          <MainTable {...mainTableProps}>{tableSlots}</MainTable>\n          <LeftTable {...leftTableProps}>{tableSlots}</LeftTable>\n          <RightTable {...rightTableProps}>{tableSlots}</RightTable>\n          {slots.footer && (\n            <Footer {...footerProps}>{{ default: slots.footer }}</Footer>\n          )}\n          {unref(showEmpty) && (\n            <Empty class={ns.e('empty')} style={unref(emptyStyle)}>\n              {{ default: slots.empty }}\n            </Empty>\n          )}\n          {slots.overlay && (\n            <Overlay class={ns.e('overlay')}>\n              {{ default: slots.overlay }}\n            </Overlay>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2\n\nexport type TableV2Instance = InstanceType<typeof TableV2> & {\n  /**\n   * @description scroll to a given position\n   * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n   */\n  scrollTo: (param: { scrollLeft?: number; scrollTop?: number }) => void\n  /**\n   * @description scroll to a given position horizontally\n   * @params scrollLeft {Number} where to scroll to.\n   */\n  scrollToLeft: (scrollLeft: number) => void\n  /**\n   * @description scroll to a given position vertically\n   * @params scrollTop { Number } where to scroll to.\n   */\n  scrollToTop: (scrollTop: number) => void\n  /**\n   * @description scroll to a given row\n   * @params row {Number} which row to scroll to\n   * @params strategy {ScrollStrategy} use what strategy to scroll to\n   */\n  scrollToRow(row: number, strategy?: ScrollStrategy): void\n}\n", "import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype AutoResizeHandler = (event: { height: number; width: number }) => void\n\nexport const autoResizerProps = buildProps({\n  disableWidth: Boolean,\n  disableHeight: Boolean,\n  onResize: {\n    type: definePropType<AutoResizeHandler>(Function),\n  },\n} as const)\n\nexport type AutoResizerProps = ExtractPropTypes<typeof autoResizerProps>\n", "import { defineComponent } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { autoResizerProps } from '../auto-resizer'\nimport { useAutoResize } from '../composables'\n\nconst AutoResizer = defineComponent({\n  name: 'ElAutoResizer',\n  props: autoResizerProps,\n  setup(props, { slots }) {\n    const ns = useNamespace('auto-resizer')\n    const { height, width, sizer } = useAutoResize(props)\n    const style = {\n      width: '100%',\n      height: '100%',\n    }\n\n    return () => {\n      return (\n        <div ref={sizer} class={ns.b()} style={style}>\n          {slots.default?.({\n            height: height.value,\n            width: width.value,\n          })}\n        </div>\n      )\n    }\n  },\n})\n\nexport default AutoResizer\n", "import { withInstall } from '@element-plus/utils'\nimport TableV2 from './src/table-v2'\nimport AutoResizer from './src/components/auto-resizer'\n\nexport {\n  Alignment as TableV2Alignment,\n  FixedDir as TableV2FixedDir,\n  SortOrder as TableV2SortOrder,\n} from './src/constants'\nexport { default as TableV2 } from './src/table-v2'\nexport * from './src/auto-resizer'\nexport { placeholderSign as TableV2Placeholder } from './src/private'\n\nexport const ElTableV2 = withInstall(TableV2)\nexport const ElAutoResizer = withInstall(AutoResizer)\n\nexport type {\n  Column,\n  Columns,\n  SortBy,\n  SortState,\n  TableV2CustomizedHeaderSlotParam,\n} from './src/types'\nexport type { TableV2Instance } from './src/table-v2'\nexport * from './src/table'\nexport * from './src/row'\n\nexport type { HeaderCellSlotProps } from './src/renderers/header-cell'\n"],
  "mappings": "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",
  "names": ["column", "columns", "column", "rowKey", "rowKey", "expandColumnKey", "isNumber", "column", "columns", "rowKey", "slots", "cellData", "style", "props", "displayText", "toString", "_createVNode", "class", "default", "TableV2Cell", "displayName", "slots", "props", "_createVNode", "column", "HeaderCell", "inheritAttrs", "TableV2HeaderRow", "defineComponent", "name", "props", "tableV2HeaderRowProps", "slots", "columns", "columnsStyles", "headerIndex", "style", "column", "Cells", "map", "columnIndex", "header", "cells", "node", "COMPONENT_NAME", "TableV2Header", "defineComponent", "name", "props", "tableV2HeaderProps", "slots", "expose", "ns", "headerRef", "ref", "width", "height", "computed", "ensureArray", "headerHeights", "scrollToLeft", "nextTick", "headerEl", "left", "renderFixedRows", "rowHeight", "fixedHeaderData", "style", "class", "columns", "rowData", "rowIndex", "renderDynamicRows", "unref", "headerIndex", "_createVNode", "useTableRow", "isScrolling", "inject", "TableV2InjectionKey", "measured", "rowRef", "isNumber", "doMeasure", "columns", "onRowHeightChange", "rowKey", "rowIndex", "style", "height", "$rowRef", "getBoundingClientRect", "value", "nextTick", "firstColumn", "placeholderSign", "rowData", "onRowHover", "handlers", "props", "rowEventHandlers", "eventHandlers", "Object", "forEach", "eventName", "isFunction", "handler", "event", "name", "hovered", "onExpand", "onRowExpand", "onMounted", "COMPONENT_NAME", "TableV2Row", "attrs", "measurable", "expose", "column", "expandColumnKey", "ColumnCells", "expandable", "slots", "depth", "unref", "cells", "isArray", "node", "_createVNode", "_mergeProps", "SortIcon", "sortOrder", "_createVNode", "ExpandIcon", "expanded", "expandable", "onExpand", "style", "size", "onClick", "_createVNode", "_mergeProps", "COMPONENT_NAME", "useTableGrid", "props", "headerRef", "ref", "bodyRef", "data", "rowHeight", "estimatedRowHeight", "headerHeight", "gridHeight", "height", "Math", "max", "unref", "hasHeader", "itemKey", "rowIndex", "rowCacheStart", "rowCacheEnd", "rowVisibleEnd", "header$", "scrollToLeft", "scrollLeft", "scrollTop", "scrollToTop", "row", "scrollToItem", "forceUpdate", "fixedRowHeight", "totalHeight", "scrollToRow", "TableGrid", "expose", "ns", "inject", "onItemRendered", "resetAfterRowIndex", "scrollTo", "columns", "isNumber", "cache", "fixedData", "useIsScrolling", "scrollbarAlwaysOn", "scrollbarEndGap", "scrollbarStartGap", "style", "bodyWidth", "headerWidth", "width", "onScroll", "isDynamicRowEnabled", "Grid", "_createVNode", "Header", "MainTable", "slots", "rest", "mainTableRef", "LeftTable", "slots", "leftTableRef", "rest", "_createVNode", "Table", "_mergeProps", "LeftTable", "slots", "rightTableRef", "rest", "_createVNode", "Table", "_mergeProps", "RowRenderer", "slots", "columns", "columnsStyles", "depthMap", "expandColumnKey", "expandedRowKeys", "estimatedRowHeight", "hasFixedColumns", "hoveringRowKey", "rowData", "rowIndex", "style", "isScrolling", "rowProps", "rowClass", "rowKey", "rowEventHandlers", "ns", "onRowExpanded", "_rowKey", "depth", "canExpand", "Boolean", "isFixedRow", "kls", "e", "is", "class", "_createVNode", "Row", "_mergeProps", "CellRenderer", "column", "columns", "columnIndex", "depth", "expandIconProps", "isScrolling", "rowData", "rowIndex", "style", "expandedRowKeys", "ns", "cellProps", "indentSize", "rowKey", "slots", "_createVNode", "TableCell", "dataKey", "dataGetter", "cellData", "extraCellProps", "class", "expandColumnKey", "_mergeProps", "kls", "e", "align", "expandable", "expanded", "iconStyle", "IconOrPlaceholder", "HeaderRenderer", "columns", "columnsStyles", "headerIndex", "style", "headerProps", "ns", "slots", "kls", "extraProps", "class", "_createVNode", "HeaderRow", "_isSlot", "enforceUnit", "HeaderCellRenderer", "slots", "column", "ns", "onColumnSorted", "props", "_createVNode", "cellStyle", "headerClass", "sortable", "class", "headerCellProps", "sorting", "oppositeOrderMap", "sortOrder", "SortOrder", "ASC", "slots", "_createVNode", "props", "class", "style", "default", "slots", "_createVNode", "props", "class", "style", "Footer", "slots", "_createVNode", "props", "class", "style", "default", "Empty", "Overlay", "_isVNode", "COMPONENT_NAME", "TableV2", "name", "props", "expose", "columnsStyles", "fixedColumnsOnLeft", "fixedColumnsOnRight", "mainColumns", "mainTableHeight", "fixedTableHeight", "leftTableWidth", "rightTableWidth", "data", "depthMap", "expandedRowKeys", "hasFixedColumns", "hoveringRowKey", "mainTableRef", "leftTableRef", "rightTableRef", "isDynamic", "isResetting", "isScrolling", "bodyWidth", "emptyStyle", "rootStyle", "headerWidth", "footerHeight", "showEmpty", "scrollTo", "scrollToLeft", "scrollToTop", "scrollToRow", "getRowHeight", "onColumnSorted", "onRowExpanded", "onRowsRendered", "onScroll", "onVerticalScroll", "useTable", "expandColumnKey", "rowKey", "cache", "cellProps", "estimatedRowHeight", "fixedData", "headerHeight", "headerClass", "headerProps", "headerCellProps", "sortBy", "sortState", "rowHeight", "rowClass", "rowEventHandlers", "rowProps", "scrollbarAlwaysOn", "indentSize", "iconSize", "useIsScrolling", "width", "class", "columns", "height", "scrollbarStartGap", "scrollbarEndGap", "style", "tableRowProps", "ns", "unref", "_createVNode", "Cell", "_mergeProps", "_isSlot", "onRowHeightChange", "Header", "HeaderCell", "_columnsStyles", "row", "cell", "header", "slots", "AutoResizer", "defineComponent", "name", "props", "autoResizerProps", "slots", "ns", "height", "width", "sizer", "useAutoResize", "_createVNode", "b", "style", "default", "value"]
}
