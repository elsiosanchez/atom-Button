import {
  _export_sfc
} from "./chunk-TYL63SS3.js";
import {
  buildProps,
  useNamespace,
  withInstall
} from "./chunk-4AENOUFB.js";
import {
  Transition,
  computed2 as computed,
  createBaseVNode,
  createElementBlock,
  createVNode,
  defineComponent,
  normalizeClass,
  openBlock,
  renderSlot,
  toDisplayString,
  unref,
  vShow,
  withCtx,
  withDirectives
} from "./chunk-ZMYV2364.js";

// node_modules/element-plus/es/components/badge/src/badge.mjs
var badgeProps = buildProps({
  value: {
    type: [String, Number],
    default: ""
  },
  max: {
    type: Number,
    default: 99
  },
  isDot: Boolean,
  hidden: Boolean,
  type: {
    type: String,
    values: ["primary", "success", "warning", "info", "danger"],
    default: "danger"
  }
});

// node_modules/element-plus/es/components/badge/src/badge2.mjs
import { isNumber } from "@vueuse/core";
var _hoisted_1 = ["textContent"];
var __default__ = defineComponent({
  name: "ElBadge"
});
var _sfc_main = defineComponent({
  ...__default__,
  props: badgeProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = useNamespace("badge");
    const content = computed(() => {
      if (props.isDot)
        return "";
      if (isNumber(props.value) && isNumber(props.max)) {
        return props.max < props.value ? `${props.max}+` : `${props.value}`;
      }
      return `${props.value}`;
    });
    expose({
      content
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(ns).b())
      }, [
        renderSlot(_ctx.$slots, "default"),
        createVNode(Transition, {
          name: `${unref(ns).namespace.value}-zoom-in-center`,
          persisted: ""
        }, {
          default: withCtx(() => [
            withDirectives(createBaseVNode("sup", {
              class: normalizeClass([
                unref(ns).e("content"),
                unref(ns).em("content", _ctx.type),
                unref(ns).is("fixed", !!_ctx.$slots.default),
                unref(ns).is("dot", _ctx.isDot)
              ]),
              textContent: toDisplayString(unref(content))
            }, null, 10, _hoisted_1), [
              [vShow, !_ctx.hidden && (unref(content) || _ctx.isDot)]
            ])
          ]),
          _: 1
        }, 8, ["name"])
      ], 2);
    };
  }
});
var Badge = _export_sfc(_sfc_main, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/badge/src/badge.vue"]]);

// node_modules/element-plus/es/components/badge/index.mjs
var ElBadge = withInstall(Badge);

export {
  badgeProps,
  ElBadge
};
//# sourceMappingURL=chunk-VPJMPWKI.js.map
