{
  "version": 3,
  "sources": ["../../../packages/components/tree/src/model/util.ts", "../../../packages/components/tree/src/model/node.ts", "../../../packages/components/tree/src/model/tree-store.ts", "../../../packages/components/tree/src/tree-node-content.vue", "../../../packages/components/tree/src/model/useNodeExpandEventBroadcast.ts", "../../../packages/components/tree/src/model/useDragNode.ts", "../../../packages/components/tree/src/tree-node.vue", "../../../packages/components/tree/src/model/useKeydown.ts", "../../../packages/components/tree/src/tree.vue", "../../../packages/components/tree/index.ts"],
  "sourcesContent": ["import type { SetupContext } from 'vue'\nimport type Node from './node'\nimport type { RootTreeType, TreeKey, TreeNodeData } from '../tree.type'\n\nexport const NODE_KEY = '$treeNodeId'\n\nexport const markNodeData = function (node: Node, data: TreeNodeData): void {\n  if (!data || data[NODE_KEY]) return\n  Object.defineProperty(data, NODE_KEY, {\n    value: node.id,\n    enumerable: false,\n    configurable: false,\n    writable: false,\n  })\n}\n\nexport const getNodeKey = function (key: TreeKey, data: TreeNodeData): any {\n  if (!key) return data[NODE_KEY]\n  return data[key]\n}\n\nexport const handleCurrentChange = (\n  store: RootTreeType['store'],\n  emit: SetupContext['emit'],\n  setCurrent: () => void\n) => {\n  const preCurrentNode = store.value.currentNode\n  setCurrent()\n  const currentNode = store.value.currentNode\n  if (preCurrentNode === currentNode) return\n\n  emit('current-change', currentNode ? currentNode.data : null, currentNode)\n}\n", "// @ts-nocheck\nimport { reactive } from 'vue'\nimport { hasOwn } from '@element-plus/utils'\nimport { NODE_KEY, markNodeData } from './util'\nimport type TreeStore from './tree-store'\n\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  FakeNode,\n  TreeKey,\n  TreeNodeChildState,\n  TreeNodeData,\n  TreeNodeLoadedDefaultProps,\n  TreeNodeOptions,\n} from '../tree.type'\n\nexport const getChildState = (node: Node[]): TreeNodeChildState => {\n  let all = true\n  let none = true\n  let allWithoutDisable = true\n  for (let i = 0, j = node.length; i < j; i++) {\n    const n = node[i]\n    if (n.checked !== true || n.indeterminate) {\n      all = false\n      if (!n.disabled) {\n        allWithoutDisable = false\n      }\n    }\n    if (n.checked !== false || n.indeterminate) {\n      none = false\n    }\n  }\n\n  return { all, none, allWithoutDisable, half: !all && !none }\n}\n\nconst reInitChecked = function (node: Node): void {\n  if (node.childNodes.length === 0 || node.loading) return\n\n  const { all, none, half } = getChildState(node.childNodes)\n  if (all) {\n    node.checked = true\n    node.indeterminate = false\n  } else if (half) {\n    node.checked = false\n    node.indeterminate = true\n  } else if (none) {\n    node.checked = false\n    node.indeterminate = false\n  }\n\n  const parent = node.parent\n  if (!parent || parent.level === 0) return\n\n  if (!node.store.checkStrictly) {\n    reInitChecked(parent)\n  }\n}\n\nconst getPropertyFromData = function (node: Node, prop: string): any {\n  const props = node.store.props\n  const data = node.data || {}\n  const config = props[prop]\n\n  if (typeof config === 'function') {\n    return config(data, node)\n  } else if (typeof config === 'string') {\n    return data[config]\n  } else if (typeof config === 'undefined') {\n    const dataProp = data[prop]\n    return dataProp === undefined ? '' : dataProp\n  }\n}\n\nlet nodeIdSeed = 0\n\nclass Node {\n  id: number\n  text: string\n  checked: boolean\n  indeterminate: boolean\n  data: TreeNodeData\n  expanded: boolean\n  parent: Node\n  visible: boolean\n  isCurrent: boolean\n  store: TreeStore\n  isLeafByUser: boolean\n  isLeaf: boolean\n  canFocus: boolean\n\n  level: number\n  loaded: boolean\n  childNodes: Node[]\n  loading: boolean\n\n  constructor(options: TreeNodeOptions) {\n    this.id = nodeIdSeed++\n    this.text = null\n    this.checked = false\n    this.indeterminate = false\n    this.data = null\n    this.expanded = false\n    this.parent = null\n    this.visible = true\n    this.isCurrent = false\n    this.canFocus = false\n\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        this[name] = options[name]\n      }\n    }\n\n    // internal\n    this.level = 0\n    this.loaded = false\n    this.childNodes = []\n    this.loading = false\n\n    if (this.parent) {\n      this.level = this.parent.level + 1\n    }\n  }\n\n  initialize() {\n    const store = this.store\n    if (!store) {\n      throw new Error('[Node]store is required!')\n    }\n    store.registerNode(this)\n\n    const props = store.props\n    if (props && typeof props.isLeaf !== 'undefined') {\n      const isLeaf = getPropertyFromData(this, 'isLeaf')\n      if (typeof isLeaf === 'boolean') {\n        this.isLeafByUser = isLeaf\n      }\n    }\n\n    if (store.lazy !== true && this.data) {\n      this.setData(this.data)\n\n      if (store.defaultExpandAll) {\n        this.expanded = true\n        this.canFocus = true\n      }\n    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n      this.expand()\n    }\n    if (!Array.isArray(this.data)) {\n      markNodeData(this, this.data)\n    }\n    if (!this.data) return\n\n    const defaultExpandedKeys = store.defaultExpandedKeys\n    const key = store.key\n\n    if (key && defaultExpandedKeys && defaultExpandedKeys.includes(this.key)) {\n      this.expand(null, store.autoExpandParent)\n    }\n\n    if (\n      key &&\n      store.currentNodeKey !== undefined &&\n      this.key === store.currentNodeKey\n    ) {\n      store.currentNode = this\n      store.currentNode.isCurrent = true\n    }\n\n    if (store.lazy) {\n      store._initDefaultCheckedNode(this)\n    }\n\n    this.updateLeafState()\n    if (this.parent && (this.level === 1 || this.parent.expanded === true))\n      this.canFocus = true\n  }\n\n  setData(data: TreeNodeData): void {\n    if (!Array.isArray(data)) {\n      markNodeData(this, data)\n    }\n\n    this.data = data\n    this.childNodes = []\n\n    let children\n    if (this.level === 0 && Array.isArray(this.data)) {\n      children = this.data\n    } else {\n      children = getPropertyFromData(this, 'children') || []\n    }\n\n    for (let i = 0, j = children.length; i < j; i++) {\n      this.insertChild({ data: children[i] })\n    }\n  }\n\n  get label(): string {\n    return getPropertyFromData(this, 'label')\n  }\n\n  get key(): TreeKey {\n    const nodeKey = this.store.key\n    if (this.data) return this.data[nodeKey]\n    return null\n  }\n\n  get disabled(): boolean {\n    return getPropertyFromData(this, 'disabled')\n  }\n\n  get nextSibling(): Nullable<Node> {\n    const parent = this.parent\n    if (parent) {\n      const index = parent.childNodes.indexOf(this)\n      if (index > -1) {\n        return parent.childNodes[index + 1]\n      }\n    }\n    return null\n  }\n\n  get previousSibling(): Nullable<Node> {\n    const parent = this.parent\n    if (parent) {\n      const index = parent.childNodes.indexOf(this)\n      if (index > -1) {\n        return index > 0 ? parent.childNodes[index - 1] : null\n      }\n    }\n    return null\n  }\n\n  contains(target: Node, deep = true): boolean {\n    return (this.childNodes || []).some(\n      (child) => child === target || (deep && child.contains(target))\n    )\n  }\n\n  remove(): void {\n    const parent = this.parent\n    if (parent) {\n      parent.removeChild(this)\n    }\n  }\n\n  insertChild(child?: FakeNode | Node, index?: number, batch?: boolean): void {\n    if (!child) throw new Error('InsertChild error: child is required.')\n\n    if (!(child instanceof Node)) {\n      if (!batch) {\n        const children = this.getChildren(true)\n        if (!children.includes(child.data)) {\n          if (typeof index === 'undefined' || index < 0) {\n            children.push(child.data)\n          } else {\n            children.splice(index, 0, child.data)\n          }\n        }\n      }\n      Object.assign(child, {\n        parent: this,\n        store: this.store,\n      })\n      child = reactive(new Node(child as TreeNodeOptions))\n      if (child instanceof Node) {\n        child.initialize()\n      }\n    }\n\n    ;(child as Node).level = this.level + 1\n\n    if (typeof index === 'undefined' || index < 0) {\n      this.childNodes.push(child as Node)\n    } else {\n      this.childNodes.splice(index, 0, child as Node)\n    }\n\n    this.updateLeafState()\n  }\n\n  insertBefore(child: FakeNode | Node, ref: Node): void {\n    let index\n    if (ref) {\n      index = this.childNodes.indexOf(ref)\n    }\n    this.insertChild(child, index)\n  }\n\n  insertAfter(child: FakeNode | Node, ref: Node): void {\n    let index\n    if (ref) {\n      index = this.childNodes.indexOf(ref)\n      if (index !== -1) index += 1\n    }\n    this.insertChild(child, index)\n  }\n\n  removeChild(child: Node): void {\n    const children = this.getChildren() || []\n    const dataIndex = children.indexOf(child.data)\n    if (dataIndex > -1) {\n      children.splice(dataIndex, 1)\n    }\n\n    const index = this.childNodes.indexOf(child)\n\n    if (index > -1) {\n      this.store && this.store.deregisterNode(child)\n      child.parent = null\n      this.childNodes.splice(index, 1)\n    }\n\n    this.updateLeafState()\n  }\n\n  removeChildByData(data: TreeNodeData): void {\n    let targetNode: Node = null\n\n    for (let i = 0; i < this.childNodes.length; i++) {\n      if (this.childNodes[i].data === data) {\n        targetNode = this.childNodes[i]\n        break\n      }\n    }\n\n    if (targetNode) {\n      this.removeChild(targetNode)\n    }\n  }\n\n  expand(callback?: () => void, expandParent?: boolean): void {\n    const done = (): void => {\n      if (expandParent) {\n        let parent = this.parent\n        while (parent.level > 0) {\n          parent.expanded = true\n          parent = parent.parent\n        }\n      }\n      this.expanded = true\n      if (callback) callback()\n      this.childNodes.forEach((item) => {\n        item.canFocus = true\n      })\n    }\n\n    if (this.shouldLoadData()) {\n      this.loadData((data) => {\n        if (Array.isArray(data)) {\n          if (this.checked) {\n            this.setChecked(true, true)\n          } else if (!this.store.checkStrictly) {\n            reInitChecked(this)\n          }\n          done()\n        }\n      })\n    } else {\n      done()\n    }\n  }\n\n  doCreateChildren(\n    array: TreeNodeData[],\n    defaultProps: TreeNodeLoadedDefaultProps = {}\n  ): void {\n    array.forEach((item) => {\n      this.insertChild(\n        Object.assign({ data: item }, defaultProps),\n        undefined,\n        true\n      )\n    })\n  }\n\n  collapse(): void {\n    this.expanded = false\n    this.childNodes.forEach((item) => {\n      item.canFocus = false\n    })\n  }\n\n  shouldLoadData(): boolean {\n    return this.store.lazy === true && this.store.load && !this.loaded\n  }\n\n  updateLeafState(): void {\n    if (\n      this.store.lazy === true &&\n      this.loaded !== true &&\n      typeof this.isLeafByUser !== 'undefined'\n    ) {\n      this.isLeaf = this.isLeafByUser\n      return\n    }\n    const childNodes = this.childNodes\n    if (\n      !this.store.lazy ||\n      (this.store.lazy === true && this.loaded === true)\n    ) {\n      this.isLeaf = !childNodes || childNodes.length === 0\n      return\n    }\n    this.isLeaf = false\n  }\n\n  setChecked(\n    value?: boolean | string,\n    deep?: boolean,\n    recursion?: boolean,\n    passValue?: boolean\n  ) {\n    this.indeterminate = value === 'half'\n    this.checked = value === true\n\n    if (this.store.checkStrictly) return\n\n    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {\n      const { all, allWithoutDisable } = getChildState(this.childNodes)\n\n      if (!this.isLeaf && !all && allWithoutDisable) {\n        this.checked = false\n        value = false\n      }\n\n      const handleDescendants = (): void => {\n        if (deep) {\n          const childNodes = this.childNodes\n          for (let i = 0, j = childNodes.length; i < j; i++) {\n            const child = childNodes[i]\n            passValue = passValue || value !== false\n            const isCheck = child.disabled ? child.checked : passValue\n            child.setChecked(isCheck, deep, true, passValue)\n          }\n          const { half, all } = getChildState(childNodes)\n          if (!all) {\n            this.checked = all\n            this.indeterminate = half\n          }\n        }\n      }\n\n      if (this.shouldLoadData()) {\n        // Only work on lazy load data.\n        this.loadData(\n          () => {\n            handleDescendants()\n            reInitChecked(this)\n          },\n          {\n            checked: value !== false,\n          }\n        )\n        return\n      } else {\n        handleDescendants()\n      }\n    }\n\n    const parent = this.parent\n    if (!parent || parent.level === 0) return\n\n    if (!recursion) {\n      reInitChecked(parent)\n    }\n  }\n\n  getChildren(forceInit = false): TreeNodeData | TreeNodeData[] {\n    // this is data\n    if (this.level === 0) return this.data\n    const data = this.data\n    if (!data) return null\n\n    const props = this.store.props\n    let children = 'children'\n    if (props) {\n      children = props.children || 'children'\n    }\n\n    if (data[children] === undefined) {\n      data[children] = null\n    }\n\n    if (forceInit && !data[children]) {\n      data[children] = []\n    }\n\n    return data[children]\n  }\n\n  updateChildren(): void {\n    const newData = (this.getChildren() || []) as TreeNodeData[]\n    const oldData = this.childNodes.map((node) => node.data)\n\n    const newDataMap = {}\n    const newNodes = []\n\n    newData.forEach((item, index) => {\n      const key = item[NODE_KEY]\n      const isNodeExists =\n        !!key && oldData.findIndex((data) => data[NODE_KEY] === key) >= 0\n      if (isNodeExists) {\n        newDataMap[key] = { index, data: item }\n      } else {\n        newNodes.push({ index, data: item })\n      }\n    })\n\n    if (!this.store.lazy) {\n      oldData.forEach((item) => {\n        if (!newDataMap[item[NODE_KEY]]) this.removeChildByData(item)\n      })\n    }\n\n    newNodes.forEach(({ index, data }) => {\n      this.insertChild({ data }, index)\n    })\n\n    this.updateLeafState()\n  }\n\n  loadData(\n    callback: (node: Node) => void,\n    defaultProps: TreeNodeLoadedDefaultProps = {}\n  ) {\n    if (\n      this.store.lazy === true &&\n      this.store.load &&\n      !this.loaded &&\n      (!this.loading || Object.keys(defaultProps).length)\n    ) {\n      this.loading = true\n\n      const resolve = (children) => {\n        this.childNodes = []\n\n        this.doCreateChildren(children, defaultProps)\n        this.loaded = true\n        this.loading = false\n\n        this.updateLeafState()\n        if (callback) {\n          callback.call(this, children)\n        }\n      }\n\n      this.store.load(this, resolve)\n    } else {\n      if (callback) {\n        callback.call(this)\n      }\n    }\n  }\n}\n\nexport default Node\n", "// @ts-nocheck\nimport { hasOwn, isObject } from '@element-plus/utils'\nimport Node from './node'\nimport { getNodeKey } from './util'\n\nimport type {\n  FilterNodeMethodFunction,\n  FilterValue,\n  LoadFunction,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n  TreeOptionProps,\n  TreeStoreNodesMap,\n  TreeStoreOptions,\n} from '../tree.type'\n\nexport default class TreeStore {\n  currentNode: Node\n  currentNodeKey: TreeKey\n  nodesMap: TreeStoreNodesMap\n  root: Node\n  data: TreeData\n  lazy: boolean\n  load: LoadFunction\n  filterNodeMethod: FilterNodeMethodFunction\n  key: TreeKey\n  defaultCheckedKeys: TreeKey[]\n  checkStrictly: boolean\n  defaultExpandedKeys: TreeKey[]\n  autoExpandParent: boolean\n  defaultExpandAll: boolean\n  checkDescendants: boolean\n  props: TreeOptionProps\n\n  constructor(options: TreeStoreOptions) {\n    this.currentNode = null\n    this.currentNodeKey = null\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option]\n      }\n    }\n\n    this.nodesMap = {}\n  }\n\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this,\n    })\n    this.root.initialize()\n\n    if (this.lazy && this.load) {\n      const loadFn = this.load\n      loadFn(this.root, (data) => {\n        this.root.doCreateChildren(data)\n        this._initDefaultCheckedNodes()\n      })\n    } else {\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  filter(value: FilterValue): void {\n    const filterNodeMethod = this.filterNodeMethod\n    const lazy = this.lazy\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child)\n\n        traverse(child)\n      })\n\n      if (!(node as Node).visible && childNodes.length) {\n        let allHidden = true\n        allHidden = !childNodes.some((child) => child.visible)\n\n        if ((node as TreeStore).root) {\n          ;(node as TreeStore).root.visible = allHidden === false\n        } else {\n          ;(node as Node).visible = allHidden === false\n        }\n      }\n      if (!value) return\n\n      if ((node as Node).visible && !(node as Node).isLeaf && !lazy)\n        (node as Node).expand()\n    }\n\n    traverse(this)\n  }\n\n  setData(newVal: TreeData): void {\n    const instanceChanged = newVal !== this.root.data\n    if (instanceChanged) {\n      this.root.setData(newVal)\n      this._initDefaultCheckedNodes()\n    } else {\n      this.root.updateChildren()\n    }\n  }\n\n  getNode(data: TreeKey | TreeNodeData | Node): Node {\n    if (data instanceof Node) return data\n    const key = isObject(data) ? getNodeKey(this.key, data) : data\n    return this.nodesMap[key] || null\n  }\n\n  insertBefore(\n    data: TreeNodeData,\n    refData: TreeKey | TreeNodeData | Node\n  ): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertBefore({ data }, refNode)\n  }\n\n  insertAfter(\n    data: TreeNodeData,\n    refData: TreeKey | TreeNodeData | Node\n  ): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertAfter({ data }, refNode)\n  }\n\n  remove(data: TreeNodeData | Node): void {\n    const node = this.getNode(data)\n\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null\n      }\n      node.parent.removeChild(node)\n    }\n  }\n\n  append(data: TreeNodeData, parentData: TreeNodeData | TreeKey | Node): void {\n    const parentNode = parentData ? this.getNode(parentData) : this.root\n\n    if (parentNode) {\n      parentNode.insertChild({ data })\n    }\n  }\n\n  _initDefaultCheckedNodes(): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n    const nodesMap = this.nodesMap\n\n    defaultCheckedKeys.forEach((checkedKey) => {\n      const node = nodesMap[checkedKey]\n\n      if (node) {\n        node.setChecked(true, !this.checkStrictly)\n      }\n    })\n  }\n\n  _initDefaultCheckedNode(node: Node): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n\n    if (defaultCheckedKeys.includes(node.key)) {\n      node.setChecked(true, !this.checkStrictly)\n    }\n  }\n\n  setDefaultCheckedKey(newVal: TreeKey[]): void {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  registerNode(node: Node): void {\n    const key = this.key\n    if (!node || !node.data) return\n\n    if (!key) {\n      this.nodesMap[node.id] = node\n    } else {\n      const nodeKey = node.key\n      if (nodeKey !== undefined) this.nodesMap[node.key] = node\n    }\n  }\n\n  deregisterNode(node: Node): void {\n    const key = this.key\n    if (!key || !node || !node.data) return\n\n    node.childNodes.forEach((child) => {\n      this.deregisterNode(child)\n    })\n\n    delete this.nodesMap[node.key]\n  }\n\n  getCheckedNodes(\n    leafOnly = false,\n    includeHalfChecked = false\n  ): TreeNodeData[] {\n    const checkedNodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (\n          (child.checked || (includeHalfChecked && child.indeterminate)) &&\n          (!leafOnly || (leafOnly && child.isLeaf))\n        ) {\n          checkedNodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return checkedNodes\n  }\n\n  getCheckedKeys(leafOnly = false): TreeKey[] {\n    return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key])\n  }\n\n  getHalfCheckedNodes(): TreeNodeData[] {\n    const nodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (child.indeterminate) {\n          nodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return nodes\n  }\n\n  getHalfCheckedKeys(): TreeKey[] {\n    return this.getHalfCheckedNodes().map((data) => (data || {})[this.key])\n  }\n\n  _getAllNodes(): Node[] {\n    const allNodes: Node[] = []\n    const nodesMap = this.nodesMap\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey])\n      }\n    }\n\n    return allNodes\n  }\n\n  updateChildren(key: TreeKey, data: TreeData): void {\n    const node = this.nodesMap[key]\n    if (!node) return\n    const childNodes = node.childNodes\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i]\n      this.remove(child.data)\n    }\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i]\n      this.append(child, node.data)\n    }\n  }\n\n  _setCheckedKeys(\n    key: TreeKey,\n    leafOnly = false,\n    checkedKeys: { [key: string]: boolean }\n  ): void {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level)\n    const cache = Object.create(null)\n    const keys = Object.keys(checkedKeys)\n    allNodes.forEach((node) => node.setChecked(false, false))\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i]\n      const nodeKey = node.data[key].toString()\n      const checked = keys.includes(nodeKey)\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false)\n        }\n        continue\n      }\n\n      let parent = node.parent\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true\n        parent = parent.parent\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false)\n        continue\n      }\n      node.setChecked(true, true)\n\n      if (leafOnly) {\n        node.setChecked(false, false)\n        const traverse = function (node: Node): void {\n          const childNodes = node.childNodes\n          childNodes.forEach((child) => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false)\n            }\n            traverse(child)\n          })\n        }\n        traverse(node)\n      }\n    }\n  }\n\n  setCheckedNodes(array: Node[], leafOnly = false): void {\n    const key = this.key\n    const checkedKeys = {}\n    array.forEach((item) => {\n      checkedKeys[(item || {})[key]] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setCheckedKeys(keys: TreeKey[], leafOnly = false): void {\n    this.defaultCheckedKeys = keys\n    const key = this.key\n    const checkedKeys = {}\n    keys.forEach((key) => {\n      checkedKeys[key] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setDefaultExpandedKeys(keys: TreeKey[]) {\n    keys = keys || []\n    this.defaultExpandedKeys = keys\n    keys.forEach((key) => {\n      const node = this.getNode(key)\n      if (node) node.expand(null, this.autoExpandParent)\n    })\n  }\n\n  setChecked(\n    data: TreeKey | TreeNodeData,\n    checked: boolean,\n    deep: boolean\n  ): void {\n    const node = this.getNode(data)\n\n    if (node) {\n      node.setChecked(!!checked, deep)\n    }\n  }\n\n  getCurrentNode(): Node {\n    return this.currentNode\n  }\n\n  setCurrentNode(currentNode: Node): void {\n    const prevCurrentNode = this.currentNode\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false\n    }\n    this.currentNode = currentNode\n    this.currentNode.isCurrent = true\n  }\n\n  setUserCurrentNode(node: Node, shouldAutoExpandParent = true): void {\n    const key = node[this.key]\n    const currNode = this.nodesMap[key]\n    this.setCurrentNode(currNode)\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true)\n    }\n  }\n\n  setCurrentNodeKey(key?: TreeKey, shouldAutoExpandParent = true): void {\n    if (key === null || key === undefined) {\n      this.currentNode && (this.currentNode.isCurrent = false)\n      this.currentNode = null\n      return\n    }\n    const node = this.getNode(key)\n    if (node) {\n      this.setCurrentNode(node)\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true)\n      }\n    }\n  }\n}\n", "<script lang=\"ts\">\n// @ts-nocheck\nimport { defineComponent, h, inject } from 'vue'\n\nimport { useNamespace } from '@element-plus/hooks'\nimport type { ComponentInternalInstance } from 'vue'\nimport type { RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNodeContent',\n  props: {\n    node: {\n      type: Object,\n      required: true,\n    },\n    renderContent: Function,\n  },\n  setup(props) {\n    const ns = useNamespace('tree')\n    const nodeInstance = inject<ComponentInternalInstance>('NodeInstance')\n    const tree = inject<RootTreeType>('RootTree')\n    return () => {\n      const node = props.node\n      const { data, store } = node\n      return props.renderContent\n        ? props.renderContent(h, { _self: nodeInstance, node, data, store })\n        : tree.ctx.slots.default\n        ? tree.ctx.slots.default({ node, data })\n        : h('span', { class: ns.be('node', 'label') }, [node.label])\n    }\n  },\n})\n</script>\n", "// @ts-nocheck\nimport { inject, provide } from 'vue'\nimport type Node from '../model/node'\n\ninterface NodeMap {\n  treeNodeExpand(node: Node): void\n  children: NodeMap[]\n}\n\nexport function useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject<NodeMap>('TreeNodeMap', null)\n  const currentNodeMap: NodeMap = {\n    treeNodeExpand: (node) => {\n      if (props.node !== node) {\n        props.node.collapse()\n      }\n    },\n    children: [],\n  }\n\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap)\n  }\n\n  provide('TreeNodeMap', currentNodeMap)\n\n  return {\n    broadcastExpanded: (node: Node): void => {\n      if (!props.accordion) return\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node)\n      }\n    },\n  }\n}\n", "// @ts-nocheck\nimport { provide, ref } from 'vue'\nimport { addClass, removeClass } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport type { InjectionKey } from 'vue'\nimport type Node from './node'\nimport type { NodeDropType } from '../tree.type'\n\ninterface TreeNode {\n  node: Node\n  $el?: HTMLElement\n}\n\ninterface DragOptions {\n  event: DragEvent\n  treeNode: TreeNode\n}\n\nexport interface DragEvents {\n  treeNodeDragStart: (options: DragOptions) => void\n  treeNodeDragOver: (options: DragOptions) => void\n  treeNodeDragEnd: (event: DragEvent) => void\n}\n\nexport const dragEventsKey: InjectionKey<DragEvents> = Symbol('dragEvents')\n\nexport function useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {\n  const ns = useNamespace('tree')\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null,\n  })\n\n  const treeNodeDragStart = ({ event, treeNode }: DragOptions) => {\n    if (\n      typeof props.allowDrag === 'function' &&\n      !props.allowDrag(treeNode.node)\n    ) {\n      event.preventDefault()\n      return false\n    }\n    event.dataTransfer.effectAllowed = 'move'\n\n    // wrap in try catch to address IE's error when first param is 'text/plain'\n    try {\n      // setData is required for draggable to work in FireFox\n      // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n      event.dataTransfer.setData('text/plain', '')\n    } catch {}\n    dragState.value.draggingNode = treeNode\n    ctx.emit('node-drag-start', treeNode.node, event)\n  }\n\n  const treeNodeDragOver = ({ event, treeNode }: DragOptions) => {\n    const dropNode = treeNode\n    const oldDropNode = dragState.value.dropNode\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, ns.is('drop-inner'))\n    }\n    const draggingNode = dragState.value.draggingNode\n    if (!draggingNode || !dropNode) return\n\n    let dropPrev = true\n    let dropInner = true\n    let dropNext = true\n    let userAllowDropInner = true\n    if (typeof props.allowDrop === 'function') {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, 'prev')\n      userAllowDropInner = dropInner = props.allowDrop(\n        draggingNode.node,\n        dropNode.node,\n        'inner'\n      )\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, 'next')\n    }\n    event.dataTransfer.dropEffect =\n      dropInner || dropPrev || dropNext ? 'move' : 'none'\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit('node-drag-leave', draggingNode.node, oldDropNode.node, event)\n      }\n      ctx.emit('node-drag-enter', draggingNode.node, dropNode.node, event)\n    }\n\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode\n    }\n\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false\n    }\n    if (\n      draggingNode.node === dropNode.node ||\n      draggingNode.node.contains(dropNode.node)\n    ) {\n      dropPrev = false\n      dropInner = false\n      dropNext = false\n    }\n\n    const targetPosition = dropNode.$el.getBoundingClientRect()\n    const treePosition = el$.value.getBoundingClientRect()\n\n    let dropType: NodeDropType\n    const prevPercent = dropPrev ? (dropInner ? 0.25 : dropNext ? 0.45 : 1) : -1\n    const nextPercent = dropNext ? (dropInner ? 0.75 : dropPrev ? 0.55 : 0) : 1\n\n    let indicatorTop = -9999\n    const distance = event.clientY - targetPosition.top\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = 'before'\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = 'after'\n    } else if (dropInner) {\n      dropType = 'inner'\n    } else {\n      dropType = 'none'\n    }\n\n    const iconPosition = dropNode.$el\n      .querySelector(`.${ns.be('node', 'expand-icon')}`)\n      .getBoundingClientRect()\n    const dropIndicator = dropIndicator$.value\n    if (dropType === 'before') {\n      indicatorTop = iconPosition.top - treePosition.top\n    } else if (dropType === 'after') {\n      indicatorTop = iconPosition.bottom - treePosition.top\n    }\n    dropIndicator.style.top = `${indicatorTop}px`\n    dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`\n\n    if (dropType === 'inner') {\n      addClass(dropNode.$el, ns.is('drop-inner'))\n    } else {\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n    }\n\n    dragState.value.showDropIndicator =\n      dropType === 'before' || dropType === 'after'\n    dragState.value.allowDrop =\n      dragState.value.showDropIndicator || userAllowDropInner\n    dragState.value.dropType = dropType\n    ctx.emit('node-drag-over', draggingNode.node, dropNode.node, event)\n  }\n\n  const treeNodeDragEnd = (event: DragEvent) => {\n    const { draggingNode, dropType, dropNode } = dragState.value\n    event.preventDefault()\n    event.dataTransfer.dropEffect = 'move'\n\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = { data: draggingNode.node.data }\n      if (dropType !== 'none') {\n        draggingNode.node.remove()\n      }\n      if (dropType === 'before') {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'after') {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node)\n      } else if (dropType === 'inner') {\n        dropNode.node.insertChild(draggingNodeCopy)\n      }\n      if (dropType !== 'none') {\n        store.value.registerNode(draggingNodeCopy)\n      }\n\n      removeClass(dropNode.$el, ns.is('drop-inner'))\n\n      ctx.emit(\n        'node-drag-end',\n        draggingNode.node,\n        dropNode.node,\n        dropType,\n        event\n      )\n      if (dropType !== 'none') {\n        ctx.emit('node-drop', draggingNode.node, dropNode.node, dropType, event)\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit('node-drag-end', draggingNode.node, null, dropType, event)\n    }\n\n    dragState.value.showDropIndicator = false\n    dragState.value.draggingNode = null\n    dragState.value.dropNode = null\n    dragState.value.allowDrop = true\n  }\n\n  provide(dragEventsKey, {\n    treeNodeDragStart,\n    treeNodeDragOver,\n    treeNodeDragEnd,\n  })\n\n  return {\n    dragState,\n  }\n}\n", "<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { isFunction, isString } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () =>\n        tree.store.value.setCurrentNode(props.node)\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n", "// @ts-nocheck\nimport { onMounted, onUpdated, shallowRef, watch } from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport type TreeStore from './tree-store'\n\nimport type { Ref } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\ninterface UseKeydownOption {\n  el$: Ref<HTMLElement>\n}\nexport function useKeydown({ el$ }: UseKeydownOption, store: Ref<TreeStore>) {\n  const ns = useNamespace('tree')\n\n  const treeItems = shallowRef<Nullable<HTMLElement>[]>([])\n  const checkboxItems = shallowRef<Nullable<HTMLElement>[]>([])\n\n  onMounted(() => {\n    initTabIndex()\n  })\n\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll('[role=treeitem]'))\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n  })\n\n  watch(checkboxItems, (val) => {\n    val.forEach((checkbox) => {\n      checkbox.setAttribute('tabindex', '-1')\n    })\n  })\n\n  const handleKeydown = (ev: KeyboardEvent): void => {\n    const currentItem = ev.target as HTMLElement\n    if (!currentItem.className.includes(ns.b('node'))) return\n    const code = ev.code\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    const currentIndex = treeItems.value.indexOf(currentItem)\n    let nextIndex\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      ev.preventDefault()\n      if (code === EVENT_CODE.up) {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex !== 0\n            ? currentIndex - 1\n            : treeItems.value.length - 1\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex--\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1\n          }\n        }\n      } else {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex < treeItems.value.length - 1\n            ? currentIndex + 1\n            : 0\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex++\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus()\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {\n      ev.preventDefault()\n      currentItem.click()\n    }\n    const hasInput = currentItem.querySelector(\n      '[type=\"checkbox\"]'\n    ) as Nullable<HTMLInputElement>\n    if ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) && hasInput) {\n      ev.preventDefault()\n      hasInput.click()\n    }\n  }\n\n  useEventListener(el$, 'keydown', handleKeydown)\n\n  const initTabIndex = (): void => {\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n    const checkedItem = el$.value.querySelectorAll(\n      `.${ns.is('checked')}[role=treeitem]`\n    )\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute('tabindex', '0')\n      return\n    }\n    treeItems.value[0]?.setAttribute('tabindex', '0')\n  }\n}\n", "<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { iconPropType } from '@element-plus/utils'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/components/form'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: {\n      type: iconPropType,\n    },\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.currentNodeKey,\n      (newVal) => {\n        store.value.setCurrentNodeKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys: TreeKey[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n\n      handleCurrentChange(store, ctx.emit, () =>\n        store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n      )\n    }\n\n    const setCurrentKey = (key?: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n\n      handleCurrentChange(store, ctx.emit, () =>\n        store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n      )\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData | Node\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData | Node\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    provide(formItemContextKey, undefined)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n", "import Tree from './src/tree.vue'\n\nimport type { App } from 'vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nTree.install = (app: App): void => {\n  app.component(Tree.name, Tree)\n}\n\nconst _Tree = Tree as SFCWithInstall<typeof Tree>\n\nexport default _Tree\nexport const ElTree = _Tree\n"],
  "mappings": "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",
  "names": ["ref", "_sfc_main", "ElCollapseTransition", "getNodeKey", "getNodeKeyUtil", "_createElementBlock", "_normalizeClass", "_createElementVNode", "_normalizeStyle", "_openBlock", "_createBlock", "_withModifiers", "_resolveDynamicComponent", "_createCommentVNode", "_createVNode", "_withCtx", "_Fragment", "_renderList", "_vShow", "_sfc_main", "getNodeKey", "getNodeKeyUtil", "_resolveComponent", "_openBlock", "_createElementBlock", "_Fragment", "_renderList", "_normalizeClass", "_createElementVNode", "_toDisplayString", "_withDirectives", "_vShow"]
}
