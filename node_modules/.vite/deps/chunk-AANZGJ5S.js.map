{
  "version": 3,
  "sources": ["../../../packages/components/radio/src/radio.ts", "../../../packages/components/radio/src/constants.ts", "../../../packages/components/radio/src/use-radio.ts", "../../../packages/components/radio/src/radio.vue", "../../../packages/components/radio/src/radio-button.ts", "../../../packages/components/radio/src/radio-button.vue", "../../../packages/components/radio/src/radio-group.ts", "../../../packages/components/radio/src/radio-group.vue", "../../../packages/components/radio/index.ts"],
  "sourcesContent": ["import { buildProps, isBoolean, isNumber, isString } from '@element-plus/utils'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useSizeProp } from '@element-plus/hooks'\nimport type { ExtractPropTypes } from 'vue'\nimport type Radio from './radio.vue'\n\nexport const radioPropsBase = buildProps({\n  /**\n   * @description size of the Radio\n   */\n  size: useSizeProp,\n  /**\n   * @description whether Radio is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description the value of Radio\n   */\n  label: {\n    type: [String, Number, Boolean],\n    default: '',\n  },\n})\n\nexport const radioProps = buildProps({\n  ...radioPropsBase,\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: '',\n  },\n  /**\n   * @description native `name` attribute\n   */\n  name: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description whether to add a border around Radio\n   */\n  border: Boolean,\n} as const)\n\nexport const radioEmits = {\n  [UPDATE_MODEL_EVENT]: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  [CHANGE_EVENT]: (val: string | number | boolean) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport type RadioProps = ExtractPropTypes<typeof radioProps>\nexport type RadioEmits = typeof radioEmits\nexport type RadioInstance = InstanceType<typeof Radio>\n", "import type { InjectionKey } from 'vue'\nimport type { RadioGroupProps } from './radio-group'\n\nexport interface RadioGroupContext extends RadioGroupProps {\n  changeEvent: (val: RadioGroupProps['modelValue']) => void\n}\n\nexport const radioGroupKey: InjectionKey<RadioGroupContext> =\n  Symbol('radioGroupKey')\n", "import { computed, inject, ref } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useFormDisabled, useFormSize } from '@element-plus/components/form'\nimport { radioGroupKey } from './constants'\n\nimport type { SetupContext } from 'vue'\nimport type { RadioEmits, RadioProps } from './radio'\n\nexport const useRadio = (\n  props: { label: RadioProps['label']; modelValue?: RadioProps['modelValue'] },\n  emit?: SetupContext<RadioEmits>['emit']\n) => {\n  const radioRef = ref<HTMLInputElement>()\n  const radioGroup = inject(radioGroupKey, undefined)\n  const isGroup = computed(() => !!radioGroup)\n  const modelValue = computed<RadioProps['modelValue']>({\n    get() {\n      return isGroup.value ? radioGroup!.modelValue : props.modelValue!\n    },\n    set(val) {\n      if (isGroup.value) {\n        radioGroup!.changeEvent(val)\n      } else {\n        emit && emit(UPDATE_MODEL_EVENT, val)\n      }\n      radioRef.value!.checked = props.modelValue === props.label\n    },\n  })\n\n  const size = useFormSize(computed(() => radioGroup?.size))\n  const disabled = useFormDisabled(computed(() => radioGroup?.disabled))\n  const focus = ref(false)\n  const tabIndex = computed(() => {\n    return disabled.value || (isGroup.value && modelValue.value !== props.label)\n      ? -1\n      : 0\n  })\n\n  return {\n    radioRef,\n    isGroup,\n    radioGroup,\n    focus,\n    size,\n    disabled,\n    tabIndex,\n    modelValue,\n  }\n}\n", "<template>\n  <label\n    :class=\"[\n      ns.b(),\n      ns.is('disabled', disabled),\n      ns.is('focus', focus),\n      ns.is('bordered', border),\n      ns.is('checked', modelValue === label),\n      ns.m(size),\n    ]\"\n  >\n    <span\n      :class=\"[\n        ns.e('input'),\n        ns.is('disabled', disabled),\n        ns.is('checked', modelValue === label),\n      ]\"\n    >\n      <input\n        ref=\"radioRef\"\n        v-model=\"modelValue\"\n        :class=\"ns.e('original')\"\n        :value=\"label\"\n        :name=\"name || radioGroup?.name\"\n        :disabled=\"disabled\"\n        type=\"radio\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n        @change=\"handleChange\"\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span :class=\"ns.e('label')\" @keydown.stop>\n      <slot>\n        {{ label }}\n      </slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { nextTick } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { radioEmits, radioProps } from './radio'\nimport { useRadio } from './use-radio'\n\ndefineOptions({\n  name: 'ElRadio',\n})\n\nconst props = defineProps(radioProps)\nconst emit = defineEmits(radioEmits)\n\nconst ns = useNamespace('radio')\nconst { radioRef, radioGroup, focus, size, disabled, modelValue } = useRadio(\n  props,\n  emit\n)\n\nfunction handleChange() {\n  nextTick(() => emit('change', modelValue.value))\n}\n</script>\n", "import { buildProps } from '@element-plus/utils'\nimport { radioPropsBase } from './radio'\nimport type { ExtractPropTypes } from 'vue'\nimport type RadioButton from './radio-button.vue'\n\nexport const radioButtonProps = buildProps({\n  ...radioPropsBase,\n  /**\n   * @description native 'name' attribute\n   */\n  name: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport type RadioButtonProps = ExtractPropTypes<typeof radioButtonProps>\nexport type RadioButtonInstance = InstanceType<typeof RadioButton>\n", "<template>\n  <label\n    :class=\"[\n      ns.b('button'),\n      ns.is('active', modelValue === label),\n      ns.is('disabled', disabled),\n      ns.is('focus', focus),\n      ns.bm('button', size),\n    ]\"\n  >\n    <input\n      ref=\"radioRef\"\n      v-model=\"modelValue\"\n      :class=\"ns.be('button', 'original-radio')\"\n      :value=\"label\"\n      type=\"radio\"\n      :name=\"name || radioGroup?.name\"\n      :disabled=\"disabled\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n    <span\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"modelValue === label ? activeStyle : {}\"\n      @keydown.stop\n    >\n      <slot>\n        {{ label }}\n      </slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useRadio } from './use-radio'\nimport { radioButtonProps } from './radio-button'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElRadioButton',\n})\n\nconst props = defineProps(radioButtonProps)\n\nconst ns = useNamespace('radio')\nconst { radioRef, focus, size, disabled, modelValue, radioGroup } =\n  useRadio(props)\n\nconst activeStyle = computed<CSSProperties>(() => {\n  return {\n    backgroundColor: radioGroup?.fill || '',\n    borderColor: radioGroup?.fill || '',\n    boxShadow: radioGroup?.fill ? `-1px 0 0 0 ${radioGroup.fill}` : '',\n    color: radioGroup?.textColor || '',\n  }\n})\n</script>\n", "import { buildProps } from '@element-plus/utils'\nimport { useSizeProp } from '@element-plus/hooks'\nimport { radioEmits } from './radio'\nimport type { ExtractPropTypes } from '@vue/runtime-core'\nimport type RadioGroup from './radio-group.vue'\n\nexport const radioGroupProps = buildProps({\n  /**\n   * @description native `id` attribute\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description the size of radio buttons or bordered radios\n   */\n  size: useSizeProp,\n  /**\n   * @description whether the nesting radios are disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: '',\n  },\n  /**\n   * @description border and background color when button is active\n   */\n  fill: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description same as `aria-label` in RadioGroup\n   */\n  label: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description font color when button is active\n   */\n  textColor: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description native `name` attribute\n   */\n  name: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n} as const)\nexport type RadioGroupProps = ExtractPropTypes<typeof radioGroupProps>\n\nexport const radioGroupEmits = radioEmits\nexport type RadioGroupEmits = typeof radioGroupEmits\nexport type RadioGroupInstance = InstanceType<typeof RadioGroup>\n", "<template>\n  <div\n    :id=\"groupId\"\n    ref=\"radioGroupRef\"\n    :class=\"ns.b('group')\"\n    role=\"radiogroup\"\n    :aria-label=\"!isLabeledByFormItem ? label || 'radio-group' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem!.labelId : undefined\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useId, useNamespace } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport { radioGroupEmits, radioGroupProps } from './radio-group'\nimport { radioGroupKey } from './constants'\n\nimport type { RadioGroupProps } from './radio-group'\n\ndefineOptions({\n  name: 'ElRadioGroup',\n})\n\nconst props = defineProps(radioGroupProps)\nconst emit = defineEmits(radioGroupEmits)\n\nconst ns = useNamespace('radio')\nconst radioId = useId()\nconst radioGroupRef = ref<HTMLDivElement>()\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = (value: RadioGroupProps['modelValue']) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  nextTick(() => emit('change', value))\n}\n\nonMounted(() => {\n  const radios =\n    radioGroupRef.value!.querySelectorAll<HTMLInputElement>('[type=radio]')\n  const firstLabel = radios[0]\n  if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {\n    firstLabel.tabIndex = 0\n  }\n})\n\nconst name = computed(() => {\n  return props.name || radioId.value\n})\n\nprovide(\n  radioGroupKey,\n  reactive({\n    ...toRefs(props),\n    changeEvent,\n    name,\n  })\n)\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Radio from './src/radio.vue'\nimport RadioButton from './src/radio-button.vue'\nimport RadioGroup from './src/radio-group.vue'\n\nexport const ElRadio = withInstall(Radio, {\n  RadioButton,\n  RadioGroup,\n})\nexport default ElRadio\nexport const ElRadioGroup = withNoopInstall(RadioGroup)\nexport const ElRadioButton = withNoopInstall(RadioButton)\n\nexport * from './src/radio'\nexport * from './src/radio-group'\nexport * from './src/radio-button'\nexport * from './src/constants'\n"],
  "mappings": "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",
  "names": []
}
