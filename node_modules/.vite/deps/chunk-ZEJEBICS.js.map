{
  "version": 3,
  "sources": ["../../../packages/components/tabs/src/constants.ts", "../../../packages/components/tabs/src/tab-bar.ts", "../../../packages/components/tabs/src/tab-bar.vue", "../../../packages/components/tabs/src/tab-nav.tsx", "../../../packages/components/tabs/src/tabs.tsx", "../../../packages/components/tabs/src/tab-pane.ts", "../../../packages/components/tabs/src/tab-pane.vue", "../../../packages/components/tabs/index.ts"],
  "sourcesContent": ["import type { ComputedRef, InjectionKey, Ref, Slots, UnwrapRef } from 'vue'\nimport type { TabsProps } from './tabs'\nimport type { TabPaneProps } from './tab-pane'\n\nexport type TabsPaneContext = UnwrapRef<{\n  uid: number\n  slots: Slots\n  props: TabPaneProps\n  paneName: ComputedRef<string | number | undefined>\n  active: ComputedRef<boolean>\n  index: Ref<string | undefined>\n  isClosable: ComputedRef<boolean>\n}>\n\nexport interface TabsRootContext {\n  props: TabsProps\n  currentName: Ref<string | number>\n  registerPane: (pane: TabsPaneContext) => void\n  unregisterPane: (uid: number) => void\n}\n\nexport const tabsRootContextKey: InjectionKey<TabsRootContext> =\n  Symbol('tabsRootContextKey')\n", "import { buildProps, definePropType, mutable } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type { TabsPaneContext } from './constants'\nimport type TabBar from './tab-bar.vue'\n\nexport const tabBarProps = buildProps({\n  tabs: {\n    type: definePropType<TabsPaneContext[]>(Array),\n    default: () => mutable([] as const),\n  },\n} as const)\n\nexport type TabBarProps = ExtractPropTypes<typeof tabBarProps>\nexport type TabBarInstance = InstanceType<typeof TabBar>\n", "<template>\n  <div\n    ref=\"barRef\"\n    :class=\"[ns.e('active-bar'), ns.is(rootTabs.props.tabPosition)]\"\n    :style=\"barStyle\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { getCurrentInstance, inject, nextTick, ref, watch } from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { capitalize, throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { tabsRootContextKey } from './constants'\nimport { tabBarProps } from './tab-bar'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElTabBar'\ndefineOptions({\n  name: COMPONENT_NAME,\n})\nconst props = defineProps(tabBarProps)\n\nconst instance = getCurrentInstance()!\nconst rootTabs = inject(tabsRootContextKey)\nif (!rootTabs) throwError(COMPONENT_NAME, '<el-tabs><el-tab-bar /></el-tabs>')\n\nconst ns = useNamespace('tabs')\n\nconst barRef = ref<HTMLDivElement>()\nconst barStyle = ref<CSSProperties>()\n\nconst getBarStyle = (): CSSProperties => {\n  let offset = 0\n  let tabSize = 0\n\n  const sizeName = ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n    ? 'width'\n    : 'height'\n  const sizeDir = sizeName === 'width' ? 'x' : 'y'\n  const position = sizeDir === 'x' ? 'left' : 'top'\n\n  props.tabs.every((tab) => {\n    const $el = instance.parent?.refs?.[`tab-${tab.uid}`] as HTMLElement\n    if (!$el) return false\n\n    if (!tab.active) {\n      return true\n    }\n\n    offset = $el[`offset${capitalize(position)}`]\n    tabSize = $el[`client${capitalize(sizeName)}`]\n\n    const tabStyles = window.getComputedStyle($el)\n\n    if (sizeName === 'width') {\n      if (props.tabs.length > 1) {\n        tabSize -=\n          Number.parseFloat(tabStyles.paddingLeft) +\n          Number.parseFloat(tabStyles.paddingRight)\n      }\n      offset += Number.parseFloat(tabStyles.paddingLeft)\n    }\n    return false\n  })\n\n  return {\n    [sizeName]: `${tabSize}px`,\n    transform: `translate${capitalize(sizeDir)}(${offset}px)`,\n  }\n}\n\nconst update = () => (barStyle.value = getBarStyle())\n\nwatch(\n  () => props.tabs,\n  async () => {\n    await nextTick()\n    update()\n  },\n  { immediate: true }\n)\nuseResizeObserver(barRef, () => update())\n\ndefineExpose({\n  /** @description tab root html element */\n  ref: barRef,\n  /** @description method to manually update tab bar style */\n  update,\n})\n</script>\n", "import {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport {\n  useDocumentVisibility,\n  useResizeObserver,\n  useWindowFocus,\n} from '@vueuse/core'\nimport {\n  buildProps,\n  capitalize,\n  definePropType,\n  mutable,\n  throwError,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowLeft, ArrowRight, Close } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport TabBar from './tab-bar.vue'\nimport { tabsRootContextKey } from './constants'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { TabsPaneContext } from './constants'\nimport type { TabPaneName } from './tabs'\n\ninterface Scrollable {\n  next?: boolean\n  prev?: number\n}\n\nexport const tabNavProps = buildProps({\n  panes: {\n    type: definePropType<TabsPaneContext[]>(Array),\n    default: () => mutable([] as const),\n  },\n  currentName: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  stretch: Boolean,\n} as const)\n\nexport const tabNavEmits = {\n  tabClick: (tab: TabsPaneContext, tabName: TabPaneName, ev: Event) =>\n    ev instanceof Event,\n  tabRemove: (tab: TabsPaneContext, ev: Event) => ev instanceof Event,\n}\n\nexport type TabNavProps = ExtractPropTypes<typeof tabNavProps>\nexport type TabNavEmits = typeof tabNavEmits\n\nconst COMPONENT_NAME = 'ElTabNav'\nconst TabNav = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabNavProps,\n  emits: tabNavEmits,\n  setup(props, { expose, emit }) {\n    const vm = getCurrentInstance()!\n\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`)\n\n    const ns = useNamespace('tabs')\n    const visibility = useDocumentVisibility()\n    const focused = useWindowFocus()\n\n    const navScroll$ = ref<HTMLDivElement>()\n    const nav$ = ref<HTMLDivElement>()\n    const el$ = ref<HTMLDivElement>()\n\n    const tabBarRef = ref<InstanceType<typeof TabBar>>()\n\n    const scrollable = ref<false | Scrollable>(false)\n    const navOffset = ref(0)\n    const isFocus = ref(false)\n    const focusable = ref(true)\n\n    const sizeName = computed(() =>\n      ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n    )\n    const navStyle = computed<CSSProperties>(() => {\n      const dir = sizeName.value === 'width' ? 'X' : 'Y'\n      return {\n        transform: `translate${dir}(-${navOffset.value}px)`,\n      }\n    })\n\n    const scrollPrev = () => {\n      if (!navScroll$.value) return\n\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (!currentOffset) return\n\n      const newOffset =\n        currentOffset > containerSize ? currentOffset - containerSize : 0\n\n      navOffset.value = newOffset\n    }\n\n    const scrollNext = () => {\n      if (!navScroll$.value || !nav$.value) return\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (navSize - currentOffset <= containerSize) return\n\n      const newOffset =\n        navSize - currentOffset > containerSize * 2\n          ? currentOffset + containerSize\n          : navSize - containerSize\n\n      navOffset.value = newOffset\n    }\n\n    const scrollToActiveTab = async () => {\n      const nav = nav$.value\n      if (!scrollable.value || !el$.value || !navScroll$.value || !nav) return\n\n      await nextTick()\n\n      const activeTab = el$.value.querySelector('.is-active')\n      if (!activeTab) return\n\n      const navScroll = navScroll$.value\n      const isHorizontal = ['top', 'bottom'].includes(\n        rootTabs.props.tabPosition\n      )\n      const activeTabBounding = activeTab.getBoundingClientRect()\n      const navScrollBounding = navScroll.getBoundingClientRect()\n      const maxOffset = isHorizontal\n        ? nav.offsetWidth - navScrollBounding.width\n        : nav.offsetHeight - navScrollBounding.height\n      const currentOffset = navOffset.value\n      let newOffset = currentOffset\n\n      if (isHorizontal) {\n        if (activeTabBounding.left < navScrollBounding.left) {\n          newOffset =\n            currentOffset - (navScrollBounding.left - activeTabBounding.left)\n        }\n        if (activeTabBounding.right > navScrollBounding.right) {\n          newOffset =\n            currentOffset + activeTabBounding.right - navScrollBounding.right\n        }\n      } else {\n        if (activeTabBounding.top < navScrollBounding.top) {\n          newOffset =\n            currentOffset - (navScrollBounding.top - activeTabBounding.top)\n        }\n        if (activeTabBounding.bottom > navScrollBounding.bottom) {\n          newOffset =\n            currentOffset +\n            (activeTabBounding.bottom - navScrollBounding.bottom)\n        }\n      }\n      newOffset = Math.max(newOffset, 0)\n      navOffset.value = Math.min(newOffset, maxOffset)\n    }\n\n    const update = () => {\n      if (!nav$.value || !navScroll$.value) return\n\n      props.stretch && tabBarRef.value?.update()\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (containerSize < navSize) {\n        scrollable.value = scrollable.value || {}\n        scrollable.value.prev = currentOffset\n        scrollable.value.next = currentOffset + containerSize < navSize\n        if (navSize - currentOffset < containerSize) {\n          navOffset.value = navSize - containerSize\n        }\n      } else {\n        scrollable.value = false\n        if (currentOffset > 0) {\n          navOffset.value = 0\n        }\n      }\n    }\n\n    const changeTab = (e: KeyboardEvent) => {\n      const code = e.code\n\n      const { up, down, left, right } = EVENT_CODE\n      if (![up, down, left, right].includes(code)) return\n\n      // 左右上下键更换tab\n      const tabList = Array.from(\n        (e.currentTarget as HTMLDivElement).querySelectorAll<HTMLDivElement>(\n          '[role=tab]:not(.is-disabled)'\n        )\n      )\n      const currentIndex = tabList.indexOf(e.target as HTMLDivElement)\n\n      let nextIndex: number\n      if (code === left || code === up) {\n        // left\n        if (currentIndex === 0) {\n          // first\n          nextIndex = tabList.length - 1\n        } else {\n          nextIndex = currentIndex - 1\n        }\n      } else {\n        // right\n        if (currentIndex < tabList.length - 1) {\n          // not last\n          nextIndex = currentIndex + 1\n        } else {\n          nextIndex = 0\n        }\n      }\n      tabList[nextIndex].focus({ preventScroll: true }) // 改变焦点元素\n      tabList[nextIndex].click() // 选中下一个tab\n      setFocus()\n    }\n\n    const setFocus = () => {\n      if (focusable.value) isFocus.value = true\n    }\n    const removeFocus = () => (isFocus.value = false)\n\n    watch(visibility, (visibility) => {\n      if (visibility === 'hidden') {\n        focusable.value = false\n      } else if (visibility === 'visible') {\n        setTimeout(() => (focusable.value = true), 50)\n      }\n    })\n    watch(focused, (focused) => {\n      if (focused) {\n        setTimeout(() => (focusable.value = true), 50)\n      } else {\n        focusable.value = false\n      }\n    })\n\n    useResizeObserver(el$, update)\n\n    onMounted(() => setTimeout(() => scrollToActiveTab(), 0))\n    onUpdated(() => update())\n\n    expose({\n      scrollToActiveTab,\n      removeFocus,\n    })\n\n    watch(\n      () => props.panes,\n      () => vm.update(),\n      { flush: 'post', deep: true }\n    )\n\n    return () => {\n      const scrollBtn = scrollable.value\n        ? [\n            <span\n              class={[\n                ns.e('nav-prev'),\n                ns.is('disabled', !scrollable.value.prev),\n              ]}\n              onClick={scrollPrev}\n            >\n              <ElIcon>\n                <ArrowLeft />\n              </ElIcon>\n            </span>,\n            <span\n              class={[\n                ns.e('nav-next'),\n                ns.is('disabled', !scrollable.value.next),\n              ]}\n              onClick={scrollNext}\n            >\n              <ElIcon>\n                <ArrowRight />\n              </ElIcon>\n            </span>,\n          ]\n        : null\n\n      const tabs = props.panes.map((pane, index) => {\n        const uid = pane.uid\n        const disabled = pane.props.disabled\n        const tabName = pane.props.name ?? pane.index ?? `${index}`\n        const closable = !disabled && (pane.isClosable || props.editable)\n        pane.index = `${index}`\n\n        const btnClose = closable ? (\n          <ElIcon\n            class=\"is-icon-close\"\n            // `onClick` not exist when generate dts\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            onClick={(ev: MouseEvent) => emit('tabRemove', pane, ev)}\n          >\n            <Close />\n          </ElIcon>\n        ) : null\n\n        const tabLabelContent = pane.slots.label?.() || pane.props.label\n        const tabindex = !disabled && pane.active ? 0 : -1\n\n        return (\n          <div\n            ref={`tab-${uid}`}\n            class={[\n              ns.e('item'),\n              ns.is(rootTabs.props.tabPosition),\n              ns.is('active', pane.active),\n              ns.is('disabled', disabled),\n              ns.is('closable', closable),\n              ns.is('focus', isFocus.value),\n            ]}\n            id={`tab-${tabName}`}\n            key={`tab-${uid}`}\n            aria-controls={`pane-${tabName}`}\n            role=\"tab\"\n            aria-selected={pane.active}\n            tabindex={tabindex}\n            onFocus={() => setFocus()}\n            onBlur={() => removeFocus()}\n            onClick={(ev: MouseEvent) => {\n              removeFocus()\n              emit('tabClick', pane, tabName, ev)\n            }}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (\n                closable &&\n                (ev.code === EVENT_CODE.delete ||\n                  ev.code === EVENT_CODE.backspace)\n              ) {\n                emit('tabRemove', pane, ev)\n              }\n            }}\n          >\n            {...[tabLabelContent, btnClose]}\n          </div>\n        )\n      })\n\n      return (\n        <div\n          ref={el$}\n          class={[\n            ns.e('nav-wrap'),\n            ns.is('scrollable', !!scrollable.value),\n            ns.is(rootTabs.props.tabPosition),\n          ]}\n        >\n          {scrollBtn}\n          <div class={ns.e('nav-scroll')} ref={navScroll$}>\n            <div\n              class={[\n                ns.e('nav'),\n                ns.is(rootTabs.props.tabPosition),\n                ns.is(\n                  'stretch',\n                  props.stretch &&\n                    ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n                ),\n              ]}\n              ref={nav$}\n              style={navStyle.value}\n              role=\"tablist\"\n              onKeydown={changeTab}\n            >\n              {...[\n                !props.type ? (\n                  <TabBar ref={tabBarRef} tabs={[...props.panes]} />\n                ) : null,\n                tabs,\n              ]}\n            </div>\n          </div>\n        </div>\n      )\n    }\n  },\n})\n\nexport type TabNavInstance = InstanceType<typeof TabNav>\nexport default TabNav\n", "import {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  nextTick,\n  provide,\n  ref,\n  renderSlot,\n  watch,\n} from 'vue'\nimport {\n  buildProps,\n  definePropType,\n  isNumber,\n  isString,\n  isUndefined,\n} from '@element-plus/utils'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport ElIcon from '@element-plus/components/icon'\nimport { Plus } from '@element-plus/icons-vue'\nimport {\n  useDeprecated,\n  useNamespace,\n  useOrderedChildren,\n} from '@element-plus/hooks'\nimport { tabsRootContextKey } from './constants'\nimport TabNav from './tab-nav'\n\nimport type { TabNavInstance } from './tab-nav'\nimport type { TabsPaneContext } from './constants'\nimport type { ExtractPropTypes } from 'vue'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type TabPaneName = string | number\n\nexport const tabsProps = buildProps({\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  activeName: {\n    type: [String, Number],\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: ['top', 'right', 'bottom', 'left'],\n    default: 'top',\n  },\n  beforeLeave: {\n    type: definePropType<\n      (newName: TabPaneName, oldName: TabPaneName) => Awaitable<void | boolean>\n    >(Function),\n    default: () => true,\n  },\n  stretch: Boolean,\n} as const)\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\n\nconst isPaneName = (value: unknown): value is string | number =>\n  isString(value) || isNumber(value)\n\nexport const tabsEmits = {\n  [UPDATE_MODEL_EVENT]: (name: TabPaneName) => isPaneName(name),\n  tabClick: (pane: TabsPaneContext, ev: Event) => ev instanceof Event,\n  tabChange: (name: TabPaneName) => isPaneName(name),\n  edit: (paneName: TabPaneName | undefined, action: 'remove' | 'add') =>\n    ['remove', 'add'].includes(action),\n  tabRemove: (name: TabPaneName) => isPaneName(name),\n  tabAdd: () => true,\n}\nexport type TabsEmits = typeof tabsEmits\n\nexport type TabsPanes = Record<number, TabsPaneContext>\n\nexport default defineComponent({\n  name: 'ElTabs',\n\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, { emit, slots, expose }) {\n    const ns = useNamespace('tabs')\n\n    const {\n      children: panes,\n      addChild: registerPane,\n      removeChild: unregisterPane,\n    } = useOrderedChildren<TabsPaneContext>(getCurrentInstance()!, 'ElTabPane')\n\n    const nav$ = ref<TabNavInstance>()\n    const currentName = ref<TabPaneName>(\n      props.modelValue ?? props.activeName ?? '0'\n    )\n\n    const changeCurrentName = (value: TabPaneName) => {\n      currentName.value = value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('tabChange', value)\n    }\n\n    const setCurrentName = async (value?: TabPaneName) => {\n      // should do nothing.\n      if (currentName.value === value || isUndefined(value)) return\n\n      try {\n        const canLeave = await props.beforeLeave?.(value, currentName.value)\n        if (canLeave !== false) {\n          changeCurrentName(value)\n\n          // call exposed function, Vue doesn't support expose in typescript yet.\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-expect-error\n          nav$.value?.removeFocus?.()\n        }\n      } catch {}\n    }\n\n    const handleTabClick = (\n      tab: TabsPaneContext,\n      tabName: TabPaneName,\n      event: Event\n    ) => {\n      if (tab.props.disabled) return\n      setCurrentName(tabName)\n      emit('tabClick', tab, event)\n    }\n\n    const handleTabRemove = (pane: TabsPaneContext, ev: Event) => {\n      if (pane.props.disabled || isUndefined(pane.props.name)) return\n      ev.stopPropagation()\n      emit('edit', pane.props.name, 'remove')\n      emit('tabRemove', pane.props.name)\n    }\n\n    const handleTabAdd = () => {\n      emit('edit', undefined, 'add')\n      emit('tabAdd')\n    }\n\n    useDeprecated(\n      {\n        from: '\"activeName\"',\n        replacement: '\"model-value\" or \"v-model\"',\n        scope: 'ElTabs',\n        version: '2.3.0',\n        ref: 'https://element-plus.org/en-US/component/tabs.html#attributes',\n        type: 'Attribute',\n      },\n      computed(() => !!props.activeName)\n    )\n\n    watch(\n      () => props.activeName,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(\n      () => props.modelValue,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(currentName, async () => {\n      await nextTick()\n      // call exposed function, Vue doesn't support expose in typescript yet.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      nav$.value?.scrollToActiveTab()\n    })\n\n    provide(tabsRootContextKey, {\n      props,\n      currentName,\n      registerPane,\n      unregisterPane,\n    })\n\n    expose({\n      currentName,\n    })\n\n    return () => {\n      const newButton =\n        props.editable || props.addable ? (\n          <span\n            class={ns.e('new-tab')}\n            tabindex=\"0\"\n            onClick={handleTabAdd}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (ev.code === EVENT_CODE.enter) handleTabAdd()\n            }}\n          >\n            <ElIcon class={ns.is('icon-plus')}>\n              <Plus />\n            </ElIcon>\n          </span>\n        ) : null\n\n      const header = (\n        <div class={[ns.e('header'), ns.is(props.tabPosition)]}>\n          {newButton}\n          <TabNav\n            ref={nav$}\n            currentName={currentName.value}\n            editable={props.editable}\n            type={props.type}\n            panes={panes.value}\n            stretch={props.stretch}\n            onTabClick={handleTabClick}\n            onTabRemove={handleTabRemove}\n          />\n        </div>\n      )\n\n      const panels = (\n        <div class={ns.e('content')}>{renderSlot(slots, 'default')}</div>\n      )\n\n      return (\n        <div\n          class={[\n            ns.b(),\n            ns.m(props.tabPosition),\n            {\n              [ns.m('card')]: props.type === 'card',\n              [ns.m('border-card')]: props.type === 'border-card',\n            },\n          ]}\n        >\n          {...props.tabPosition !== 'bottom'\n            ? [header, panels]\n            : [panels, header]}\n        </div>\n      )\n    }\n  },\n})\n", "import { buildProps } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type TabPane from './tab-pane.vue'\n\nexport const tabPaneProps = buildProps({\n  label: {\n    type: String,\n    default: '',\n  },\n  name: {\n    type: [String, Number],\n  },\n  closable: Boolean,\n  disabled: Boolean,\n  lazy: Boolean,\n} as const)\n\nexport type TabPaneProps = ExtractPropTypes<typeof tabPaneProps>\n\nexport type TabPaneInstance = InstanceType<typeof TabPane>\n", "<template>\n  <div\n    v-if=\"shouldBeRender\"\n    v-show=\"active\"\n    :id=\"`pane-${paneName}`\"\n    :class=\"ns.b()\"\n    role=\"tabpanel\"\n    :aria-hidden=\"!active\"\n    :aria-labelledby=\"`tab-${paneName}`\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  getCurrentInstance,\n  inject,\n  onMounted,\n  onUnmounted,\n  reactive,\n  ref,\n  useSlots,\n  watch,\n} from 'vue'\nimport { eagerComputed } from '@vueuse/core'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { tabsRootContextKey } from './constants'\nimport { tabPaneProps } from './tab-pane'\n\nconst COMPONENT_NAME = 'ElTabPane'\ndefineOptions({\n  name: COMPONENT_NAME,\n})\nconst props = defineProps(tabPaneProps)\n\nconst instance = getCurrentInstance()!\nconst slots = useSlots()\n\nconst tabsRoot = inject(tabsRootContextKey)\nif (!tabsRoot)\n  throwError(COMPONENT_NAME, 'usage: <el-tabs><el-tab-pane /></el-tabs/>')\n\nconst ns = useNamespace('tab-pane')\n\nconst index = ref<string>()\nconst isClosable = computed(() => props.closable || tabsRoot.props.closable)\nconst active = eagerComputed(\n  () => tabsRoot.currentName.value === (props.name ?? index.value)\n)\nconst loaded = ref(active.value)\nconst paneName = computed(() => props.name ?? index.value)\nconst shouldBeRender = eagerComputed(\n  () => !props.lazy || loaded.value || active.value\n)\n\nwatch(active, (val) => {\n  if (val) loaded.value = true\n})\n\nconst pane = reactive({\n  uid: instance.uid,\n  slots,\n  props,\n  paneName,\n  active,\n  index,\n  isClosable,\n})\n\nonMounted(() => {\n  tabsRoot.registerPane(pane)\n})\n\nonUnmounted(() => {\n  tabsRoot.unregisterPane(pane.uid)\n})\n</script>\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\nimport Tabs from './src/tabs'\nimport TabPane from './src/tab-pane.vue'\n\nexport const ElTabs = withInstall(Tabs, {\n  TabPane,\n})\nexport const ElTabPane = withNoopInstall(TabPane)\nexport default ElTabs\n\nexport * from './src/tabs'\nexport * from './src/tab-bar'\nexport * from './src/tab-nav'\nexport * from './src/tab-pane'\nexport * from './src/constants'\n"],
  "mappings": "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",
  "names": ["tabNavProps", "buildProps", "panes", "type", "definePropType", "Array", "default", "mutable", "currentName", "String", "Number", "editable", "Boolean", "values", "stretch", "tabNavEmits", "tabClick", "tab", "tabName", "ev", "Event", "tabRemove", "COMPONENT_NAME", "TabNav", "defineComponent", "name", "props", "emits", "expose", "emit", "vm", "getCurrentInstance", "ns", "useNamespace", "visibility", "useDocumentVisibility", "focused", "useWindowFocus", "navScroll$", "ref", "nav$", "el$", "tabBarRef", "scrollable", "navOffset", "isFocus", "focusable", "sizeName", "computed", "includes", "rootTabs", "tabPosition", "navStyle", "dir", "value", "transform", "scrollPrev", "containerSize", "capitalize", "currentOffset", "newOffset", "scrollNext", "activeTab", "navScroll", "navScrollBounding", "maxOffset", "isHorizontal", "offsetWidth", "activeTabBounding", "right", "top", "bottom", "max", "update", "navSize", "prev", "changeTab", "left", "tabList", "currentIndex", "nextIndex", "preventScroll", "setFocus", "watch", "_createVNode", "useResizeObserver", "setTimeout", "scrollToActiveTab", "onUpdated", "removeFocus", "flush", "deep", "e", "pane", "index", "btnClose", "delete", "backspace", "tabLabelContent", "tabsProps", "buildProps", "type", "String", "values", "default", "activeName", "Number", "closable", "Boolean", "addable", "modelValue", "editable", "tabPosition", "beforeLeave", "definePropType", "Function", "stretch", "tabsEmits", "name", "tabClick", "ev", "tabChange", "edit", "tabRemove", "tabAdd", "props", "emits", "slots", "expose", "children", "addChild", "removeChild", "unregisterPane", "getCurrentInstance", "nav$", "changeCurrentName", "value", "emit", "UPDATE_MODEL_EVENT", "setCurrentName", "currentName", "handleTabClick", "event", "handleTabRemove", "handleTabAdd", "useDeprecated", "from", "replacement", "scope", "version", "ref", "watch", "_createVNode", "newButton", "e", "ns", "panes", "COMPONENT_NAME"]
}
