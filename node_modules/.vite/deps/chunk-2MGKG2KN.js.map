{
  "version": 3,
  "sources": ["../../../packages/components/descriptions/src/token.ts", "../../../packages/components/descriptions/src/descriptions-cell.ts", "../../../packages/components/descriptions/src/descriptions-row.ts", "../../../packages/components/descriptions/src/descriptions-row.vue", "../../../packages/components/descriptions/src/description.ts", "../../../packages/components/descriptions/src/description.vue", "../../../packages/components/descriptions/src/description-item.ts", "../../../packages/components/descriptions/index.ts"],
  "sourcesContent": ["import type { InjectionKey } from 'vue'\nimport type { IDescriptionsInject } from './descriptions.type'\n\nexport const descriptionsKey: InjectionKey<IDescriptionsInject> =\n  Symbol('elDescriptions')\n", "// @ts-nocheck\nimport { defineComponent, h, inject } from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { addUnit, getNormalizedProps } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { descriptionsKey } from './token'\n\nimport type { VNode } from 'vue'\nimport type {\n  IDescriptionsInject,\n  IDescriptionsItemInject,\n} from './descriptions.type'\n\nexport default defineComponent({\n  name: 'ElDescriptionsCell',\n  props: {\n    cell: {\n      type: Object,\n    },\n    tag: {\n      type: String,\n    },\n    type: {\n      type: String,\n    },\n  },\n  setup() {\n    const descriptions = inject(descriptionsKey, {} as IDescriptionsInject)\n\n    return {\n      descriptions,\n    }\n  },\n  render() {\n    const item = getNormalizedProps(\n      this.cell as VNode\n    ) as IDescriptionsItemInject\n\n    const { border, direction } = this.descriptions\n    const isVertical = direction === 'vertical'\n    const label = this.cell?.children?.label?.() || item.label\n    const content = this.cell?.children?.default?.()\n    const span = item.span\n    const align = item.align ? `is-${item.align}` : ''\n    const labelAlign = item.labelAlign ? `is-${item.labelAlign}` : '' || align\n    const className = item.className\n    const labelClassName = item.labelClassName\n    const style = {\n      width: addUnit(item.width),\n      minWidth: addUnit(item.minWidth),\n    }\n    const ns = useNamespace('descriptions')\n\n    switch (this.type) {\n      case 'label':\n        return h(\n          this.tag,\n          {\n            style,\n            class: [\n              ns.e('cell'),\n              ns.e('label'),\n              ns.is('bordered-label', border),\n              ns.is('vertical-label', isVertical),\n              labelAlign,\n              labelClassName,\n            ],\n            colSpan: isVertical ? span : 1,\n          },\n          label\n        )\n      case 'content':\n        return h(\n          this.tag,\n          {\n            style,\n            class: [\n              ns.e('cell'),\n              ns.e('content'),\n              ns.is('bordered-content', border),\n              ns.is('vertical-content', isVertical),\n              align,\n              className,\n            ],\n            colSpan: isVertical ? span : span * 2 - 1,\n          },\n          content\n        )\n      default:\n        return h(\n          'td',\n          {\n            style,\n            class: [ns.e('cell'), align],\n            colSpan: span,\n          },\n          [\n            !isNil(label)\n              ? h(\n                  'span',\n                  {\n                    class: [ns.e('label'), labelClassName],\n                  },\n                  label\n                )\n              : undefined,\n            h(\n              'span',\n              {\n                class: [ns.e('content'), className],\n              },\n              content\n            ),\n          ]\n        )\n    }\n  },\n})\n", "import { buildProps } from '@element-plus/utils'\n\nexport const descriptionsRowProps = buildProps({\n  row: {\n    type: Array,\n    default: () => [],\n  },\n} as const)\n", "<template>\n  <template v-if=\"descriptions.direction === 'vertical'\">\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr1-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"th\" type=\"label\" />\n      </template>\n    </tr>\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr2-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n    </tr>\n  </template>\n  <tr v-else>\n    <template v-for=\"(cell, index) in row\" :key=\"`tr3-${index}`\">\n      <template v-if=\"descriptions.border\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"label\" />\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n      <el-descriptions-cell v-else :cell=\"cell\" tag=\"td\" type=\"both\" />\n    </template>\n  </tr>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport { inject } from 'vue'\n\nimport ElDescriptionsCell from './descriptions-cell'\nimport { descriptionsKey } from './token'\nimport { descriptionsRowProps } from './descriptions-row'\n\nimport type { IDescriptionsInject } from './descriptions.type'\n\ndefineOptions({\n  name: 'ElDescriptionsRow',\n})\n\ndefineProps(descriptionsRowProps)\n\nconst descriptions = inject(descriptionsKey, {} as IDescriptionsInject)\n</script>\n", "import { buildProps } from '@element-plus/utils'\nimport { useSizeProp } from '@element-plus/hooks'\n\nimport type Description from './description.vue'\n\nexport const descriptionProps = buildProps({\n  border: {\n    type: Boolean,\n    default: false,\n  },\n  column: {\n    type: Number,\n    default: 3,\n  },\n  direction: {\n    type: String,\n    values: ['horizontal', 'vertical'],\n    default: 'horizontal',\n  },\n  size: useSizeProp,\n  title: {\n    type: String,\n    default: '',\n  },\n  extra: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport type DescriptionInstance = InstanceType<typeof Description>\n", "<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport { computed, provide, useSlots } from 'vue'\nimport { flattedChildren } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormSize } from '@element-plus/components/form'\nimport ElDescriptionsRow from './descriptions-row.vue'\nimport { descriptionsKey } from './token'\nimport { descriptionProps } from './description'\n\ndefineOptions({\n  name: 'ElDescriptions',\n})\n\nconst props = defineProps(descriptionProps)\n\nconst ns = useNamespace('descriptions')\n\nconst descriptionsSize = useFormSize()\n\nconst slots = useSlots()\n\nprovide(descriptionsKey, props)\n\nconst descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)])\n\nconst filledNode = (node, span, count, isLast = false) => {\n  if (!node.props) {\n    node.props = {}\n  }\n  if (span > count) {\n    node.props.span = count\n  }\n  if (isLast) {\n    // set the last span\n    node.props.span = span\n  }\n  return node\n}\n\nconst getRows = () => {\n  const children = flattedChildren(slots.default?.()).filter(\n    (node) => node?.type?.name === 'ElDescriptionsItem'\n  )\n  const rows = []\n  let temp = []\n  let count = props.column\n  let totalSpan = 0 // all spans number of item\n\n  children.forEach((node, index) => {\n    const span = node.props?.span || 1\n\n    if (index < children.length - 1) {\n      totalSpan += span > count ? count : span\n    }\n\n    if (index === children.length - 1) {\n      // calculate the last item span\n      const lastSpan = props.column - (totalSpan % props.column)\n      temp.push(filledNode(node, lastSpan, count, true))\n      rows.push(temp)\n      return\n    }\n\n    if (span < count) {\n      count -= span\n      temp.push(node)\n    } else {\n      temp.push(filledNode(node, span, count))\n      rows.push(temp)\n      count = props.column\n      temp = []\n    }\n  })\n\n  return rows\n}\n</script>\n", "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'ElDescriptionsItem',\n  props: {\n    label: {\n      type: String,\n      default: '',\n    },\n    span: {\n      type: Number,\n      default: 1,\n    },\n    width: {\n      type: [String, Number],\n      default: '',\n    },\n    minWidth: {\n      type: [String, Number],\n      default: '',\n    },\n    align: {\n      type: String,\n      default: 'left',\n    },\n    labelAlign: {\n      type: String,\n      default: '',\n    },\n    className: {\n      type: String,\n      default: '',\n    },\n    labelClassName: {\n      type: String,\n      default: '',\n    },\n  },\n})\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Descriptions from './src/description.vue'\nimport DescriptionsItem from './src/description-item'\n\nexport const ElDescriptions = withInstall(Descriptions, {\n  DescriptionsItem,\n})\n\nexport const ElDescriptionsItem = withNoopInstall(DescriptionsItem)\n\nexport default ElDescriptions\n\nexport * from './src/description'\n"],
  "mappings": "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",
  "names": []
}
