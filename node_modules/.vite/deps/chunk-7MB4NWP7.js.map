{
  "version": 3,
  "sources": ["../../../packages/components/cascader/src/cascader.ts", "../../../packages/components/cascader/src/cascader.vue", "../../../packages/components/cascader/index.ts"],
  "sourcesContent": ["import { CommonProps } from '@element-plus/components/cascader-panel'\nimport { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { useSizeProp } from '@element-plus/hooks'\nimport { useTooltipContentProps } from '@element-plus/components/tooltip'\nimport { tagProps } from '@element-plus/components/tag'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type {\n  CascaderNode,\n  CascaderValue,\n} from '@element-plus/components/cascader-panel'\n\nexport const cascaderProps = buildProps({\n  ...CommonProps,\n  /**\n   * @description size of input\n   */\n  size: useSizeProp,\n  /**\n   * @description placeholder of input\n   */\n  placeholder: String,\n  /**\n   * @description whether Cascader is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description whether selected value can be cleared\n   */\n  clearable: Boolean,\n  /**\n   * @description whether the options can be searched\n   */\n  filterable: Boolean,\n  /**\n   * @description customize search logic, the first parameter is `node`, the second is `keyword`, and need return a boolean value indicating whether it hits.\n   */\n  filterMethod: {\n    type: definePropType<(node: CascaderNode, keyword: string) => boolean>(\n      Function\n    ),\n    default: (node: CascaderNode, keyword: string) =>\n      node.text.includes(keyword),\n  },\n  /**\n   * @description option label separator\n   */\n  separator: {\n    type: String,\n    default: ' / ',\n  },\n  /**\n   * @description whether to display all levels of the selected value in the input\n   */\n  showAllLevels: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description whether to collapse tags in multiple selection mode\n   */\n  collapseTags: Boolean,\n  /**\n   * @description native input id\n   */\n  collapseTagsTooltip: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description debounce delay when typing filter keyword, in milliseconds\n   */\n  debounce: {\n    type: Number,\n    default: 300,\n  },\n  /**\n   * @description hook function before filtering with the value to be filtered as its parameter. If `false` is returned or a `Promise` is returned and then is rejected, filtering will be aborted\n   */\n  beforeFilter: {\n    type: definePropType<(value: string) => boolean | Promise<any>>(Function),\n    default: () => true,\n  },\n  /**\n   * @description custom class name for Cascader's dropdown\n   */\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description whether cascader popup is teleported\n   */\n  teleported: useTooltipContentProps.teleported,\n  /**\n   * @description tag type\n   */\n  // eslint-disable-next-line vue/require-prop-types\n  tagType: { ...tagProps.type, default: 'info' },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n})\n\nexport const cascaderEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CascaderValue) => !!val || val === null,\n  [CHANGE_EVENT]: (val: CascaderValue) => !!val || val === null,\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  visibleChange: (val: boolean) => isBoolean(val),\n  expandChange: (val: CascaderValue) => !!val,\n  removeTag: (val: CascaderNode['valueByOption']) => !!val,\n}\n\n// Type name is taken(cascader-panel/src/node), needs discussion\n// export type CascaderProps = ExtractPropTypes<typeof cascaderProps>\n\nexport type CascaderEmits = typeof cascaderEmits\n", "<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass]\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"[\n      'bottom-start',\n      'bottom',\n      'top-start',\n      'top',\n      'right',\n      'left',\n    ]\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    placement=\"bottom-start\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    effect=\"light\"\n    pure\n    persistent\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[cascaderPanelRef]=\"() => togglePopperVisible(false)\"\n        :class=\"cascaderKls\"\n        :style=\"cascaderStyle\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"currentPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"inputClass\"\n          :tabindex=\"multiple && filterable && !isDisabled ? -1 : undefined\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"cascaderIconKls\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" :class=\"nsCascader.e('tags')\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            :type=\"tagType\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <template v-if=\"tag.isCollapseTag === false\">\n              <span>{{ tag.text }}</span>\n            </template>\n            <template v-else>\n              <el-tooltip\n                :disabled=\"popperVisible || !collapseTagsTooltip\"\n                :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                placement=\"bottom\"\n                effect=\"light\"\n              >\n                <template #default>\n                  <span>{{ tag.text }}</span>\n                </template>\n                <template #content>\n                  <div :class=\"nsCascader.e('collapse-tags')\">\n                    <div\n                      v-for=\"(tag2, idx) in allPresentTags.slice(1)\"\n                      :key=\"idx\"\n                      :class=\"nsCascader.e('collapse-tag')\"\n                    >\n                      <el-tag\n                        :key=\"tag2.key\"\n                        class=\"in-tooltip\"\n                        :type=\"tagType\"\n                        :size=\"tagSize\"\n                        :hit=\"tag2.hitState\"\n                        :closable=\"tag2.closable\"\n                        disable-transitions\n                        @close=\"deleteTag(tag2)\"\n                      >\n                        <span>{{ tag2.text }}</span>\n                      </el-tag>\n                    </div>\n                  </div>\n                </template>\n              </el-tooltip>\n            </template>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e as KeyboardEvent)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"panel\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props.props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\">\n              <check />\n            </el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, useAttrs, watch } from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { cloneDeep, debounce } from 'lodash-unified'\nimport { isClient, useCssVar, useResizeObserver } from '@vueuse/core'\nimport ElCascaderPanel from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormItem, useFormSize } from '@element-plus/components/form'\nimport { ClickOutside as vClickoutside } from '@element-plus/directives'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { debugWarn, focusNode, getSibling, isKorean } from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check, CircleClose } from '@element-plus/icons-vue'\nimport { cascaderEmits, cascaderProps } from './cascader'\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, Ref, StyleValue } from 'vue'\nimport type {\n  CascaderNode,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\ntype cascaderPanelType = InstanceType<typeof ElCascaderPanel>\ntype tooltipType = InstanceType<typeof ElTooltip>\ntype inputType = InstanceType<typeof ElInput>\ntype suggestionPanelType = InstanceType<typeof ElScrollbar>\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(cascaderProps)\nconst emit = defineEmits(cascaderEmits)\nconst attrs = useAttrs()\n\nlet inputInitialHeight = 0\nlet pressDeleteCount = 0\n\nconst nsCascader = useNamespace('cascader')\nconst nsInput = useNamespace('input')\n\nconst { t } = useLocale()\nconst { form, formItem } = useFormItem()\n\nconst tooltipRef: Ref<tooltipType | null> = ref(null)\nconst input: Ref<inputType | null> = ref(null)\nconst tagWrapper = ref(null)\nconst panel: Ref<cascaderPanelType | null> = ref(null)\nconst suggestionPanel: Ref<suggestionPanelType | null> = ref(null)\nconst popperVisible = ref(false)\nconst inputHover = ref(false)\nconst filtering = ref(false)\nconst filterFocus = ref(false)\nconst inputValue = ref('')\nconst searchInputValue = ref('')\nconst presentTags: Ref<Tag[]> = ref([])\nconst allPresentTags: Ref<Tag[]> = ref([])\nconst suggestions: Ref<CascaderNode[]> = ref([])\nconst isOnComposition = ref(false)\n\nconst cascaderStyle = computed<StyleValue>(() => {\n  return attrs.style as StyleValue\n})\n\nconst isDisabled = computed(() => props.disabled || form?.disabled)\nconst inputPlaceholder = computed(\n  () => props.placeholder || t('el.cascader.placeholder')\n)\nconst currentPlaceholder = computed(() =>\n  searchInputValue.value ||\n  presentTags.value.length > 0 ||\n  isOnComposition.value\n    ? ''\n    : inputPlaceholder.value\n)\nconst realSize = useFormSize()\nconst tagSize = computed(() =>\n  ['small'].includes(realSize.value) ? 'small' : 'default'\n)\nconst multiple = computed(() => !!props.props.multiple)\nconst readonly = computed(() => !props.filterable || multiple.value)\nconst searchKeyword = computed(() =>\n  multiple.value ? searchInputValue.value : inputValue.value\n)\nconst checkedNodes: ComputedRef<CascaderNode[]> = computed(\n  () => panel.value?.checkedNodes || []\n)\nconst clearBtnVisible = computed(() => {\n  if (\n    !props.clearable ||\n    isDisabled.value ||\n    filtering.value ||\n    !inputHover.value\n  )\n    return false\n\n  return !!checkedNodes.value.length\n})\nconst presentText = computed(() => {\n  const { showAllLevels, separator } = props\n  const nodes = checkedNodes.value\n  return nodes.length\n    ? multiple.value\n      ? ''\n      : nodes[0].calcText(showAllLevels, separator)\n    : ''\n})\n\nconst checkedValue = computed<CascaderValue>({\n  get() {\n    return cloneDeep(props.modelValue) as CascaderValue\n  },\n  set(val) {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(CHANGE_EVENT, val)\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst cascaderPanelRef = computed(() => {\n  return tooltipRef.value?.popperRef?.contentRef\n})\n\nconst cascaderKls = computed(() => {\n  return [\n    nsCascader.b(),\n    nsCascader.m(realSize.value),\n    nsCascader.is('disabled', isDisabled.value),\n    attrs.class,\n  ]\n})\n\nconst cascaderIconKls = computed(() => {\n  return [\n    nsInput.e('icon'),\n    'icon-arrow-down',\n    nsCascader.is('reverse', popperVisible.value),\n  ]\n})\n\nconst inputClass = computed(() => {\n  return nsCascader.is('focus', popperVisible.value || filterFocus.value)\n})\n\nconst togglePopperVisible = (visible?: boolean) => {\n  if (isDisabled.value) return\n\n  visible = visible ?? !popperVisible.value\n\n  if (visible !== popperVisible.value) {\n    popperVisible.value = visible\n    input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n    if (visible) {\n      updatePopperPosition()\n      nextTick(panel.value?.scrollToExpandingNode)\n    } else if (props.filterable) {\n      syncPresentTextValue()\n    }\n\n    emit('visibleChange', visible)\n  }\n}\n\nconst updatePopperPosition = () => {\n  nextTick(() => {\n    tooltipRef.value?.updatePopper()\n  })\n}\n\nconst hideSuggestionPanel = () => {\n  filtering.value = false\n}\n\nconst genTag = (node: CascaderNode): Tag => {\n  const { showAllLevels, separator } = props\n  return {\n    node,\n    key: node.uid,\n    text: node.calcText(showAllLevels, separator),\n    hitState: false,\n    closable: !isDisabled.value && !node.isDisabled,\n    isCollapseTag: false,\n  }\n}\n\nconst deleteTag = (tag: Tag) => {\n  const node = tag.node as CascaderNode\n  node.doCheck(false)\n  panel.value?.calculateCheckedValue()\n  emit('removeTag', node.valueByOption)\n}\n\nconst calculatePresentTags = () => {\n  if (!multiple.value) return\n\n  const nodes = checkedNodes.value\n  const tags: Tag[] = []\n\n  const allTags: Tag[] = []\n  nodes.forEach((node) => allTags.push(genTag(node)))\n  allPresentTags.value = allTags\n\n  if (nodes.length) {\n    const [first, ...rest] = nodes\n    const restCount = rest.length\n\n    tags.push(genTag(first))\n\n    if (restCount) {\n      if (props.collapseTags) {\n        tags.push({\n          key: -1,\n          text: `+ ${restCount}`,\n          closable: false,\n          isCollapseTag: true,\n        })\n      } else {\n        rest.forEach((node) => tags.push(genTag(node)))\n      }\n    }\n  }\n\n  presentTags.value = tags\n}\n\nconst calculateSuggestions = () => {\n  const { filterMethod, showAllLevels, separator } = props\n  const res = panel.value\n    ?.getFlattedNodes(!props.props.checkStrictly)\n    ?.filter((node) => {\n      if (node.isDisabled) return false\n      node.calcText(showAllLevels, separator)\n      return filterMethod(node, searchKeyword.value)\n    })\n\n  if (multiple.value) {\n    presentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n    allPresentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n  }\n\n  filtering.value = true\n  suggestions.value = res!\n  updatePopperPosition()\n}\n\nconst focusFirstNode = () => {\n  let firstNode!: HTMLElement\n\n  if (filtering.value && suggestionPanel.value) {\n    firstNode = suggestionPanel.value.$el.querySelector(\n      `.${nsCascader.e('suggestion-item')}`\n    )\n  } else {\n    firstNode = panel.value?.$el.querySelector(\n      `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n    )\n  }\n\n  if (firstNode) {\n    firstNode.focus()\n    !filtering.value && firstNode.click()\n  }\n}\n\nconst updateStyle = () => {\n  const inputInner = input.value?.input\n  const tagWrapperEl = tagWrapper.value\n  const suggestionPanelEl = suggestionPanel.value?.$el\n\n  if (!isClient || !inputInner) return\n\n  if (suggestionPanelEl) {\n    const suggestionList = suggestionPanelEl.querySelector(\n      `.${nsCascader.e('suggestion-list')}`\n    )\n    suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n  }\n\n  if (tagWrapperEl) {\n    const { offsetHeight } = tagWrapperEl\n    const height =\n      presentTags.value.length > 0\n        ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n        : `${inputInitialHeight}px`\n    inputInner.style.height = height\n    updatePopperPosition()\n  }\n}\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return panel.value?.getCheckedNodes(leafOnly)\n}\n\nconst handleExpandChange = (value: CascaderValue) => {\n  updatePopperPosition()\n  emit('expandChange', value)\n}\n\nconst handleComposition = (event: CompositionEvent) => {\n  const text = (event.target as HTMLInputElement)?.value\n  if (event.type === 'compositionend') {\n    isOnComposition.value = false\n    nextTick(() => handleInput(text))\n  } else {\n    const lastCharacter = text[text.length - 1] || ''\n    isOnComposition.value = !isKorean(lastCharacter)\n  }\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  if (isOnComposition.value) return\n\n  switch (e.code) {\n    case EVENT_CODE.enter:\n      togglePopperVisible()\n      break\n    case EVENT_CODE.down:\n      togglePopperVisible(true)\n      nextTick(focusFirstNode)\n      e.preventDefault()\n      break\n    case EVENT_CODE.esc:\n      if (popperVisible.value === true) {\n        e.preventDefault()\n        e.stopPropagation()\n        togglePopperVisible(false)\n      }\n      break\n    case EVENT_CODE.tab:\n      togglePopperVisible(false)\n      break\n  }\n}\n\nconst handleClear = () => {\n  panel.value?.clearCheckedNodes()\n  if (!popperVisible.value && props.filterable) {\n    syncPresentTextValue()\n  }\n  togglePopperVisible(false)\n}\n\nconst syncPresentTextValue = () => {\n  const { value } = presentText\n  inputValue.value = value\n  searchInputValue.value = value\n}\n\nconst handleSuggestionClick = (node: CascaderNode) => {\n  const { checked } = node\n\n  if (multiple.value) {\n    panel.value?.handleCheckChange(node, !checked, false)\n  } else {\n    !checked && panel.value?.handleCheckChange(node, true, false)\n    togglePopperVisible(false)\n  }\n}\n\nconst handleSuggestionKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.enter:\n      target.click()\n      break\n  }\n}\n\nconst handleDelete = () => {\n  const tags = presentTags.value\n  const lastTag = tags[tags.length - 1]\n  pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n  if (!lastTag || !pressDeleteCount || (props.collapseTags && tags.length > 1))\n    return\n\n  if (lastTag.hitState) {\n    deleteTag(lastTag)\n  } else {\n    lastTag.hitState = true\n  }\n}\n\nconst handleFocus = (e: FocusEvent) => {\n  const el = e.target as HTMLInputElement\n  const name = nsCascader.e('search-input')\n  if (el.className === name) {\n    filterFocus.value = true\n  }\n  emit('focus', e)\n}\n\nconst handleBlur = (e: FocusEvent) => {\n  filterFocus.value = false\n  emit('blur', e)\n}\n\nconst handleFilter = debounce(() => {\n  const { value } = searchKeyword\n\n  if (!value) return\n\n  const passed = props.beforeFilter(value)\n\n  if (isPromise(passed)) {\n    passed.then(calculateSuggestions).catch(() => {\n      /* prevent log error */\n    })\n  } else if (passed !== false) {\n    calculateSuggestions()\n  } else {\n    hideSuggestionPanel()\n  }\n}, props.debounce)\n\nconst handleInput = (val: string, e?: KeyboardEvent) => {\n  !popperVisible.value && togglePopperVisible(true)\n\n  if (e?.isComposing) return\n\n  val ? handleFilter() : hideSuggestionPanel()\n}\n\nwatch(filtering, updatePopperPosition)\n\nwatch([checkedNodes, isDisabled], calculatePresentTags)\n\nwatch(presentTags, () => {\n  nextTick(() => updateStyle())\n})\n\nwatch(presentText, syncPresentTextValue, { immediate: true })\n\nonMounted(() => {\n  const inputInner = input.value!.input!\n\n  const inputInnerHeight =\n    Number.parseFloat(\n      useCssVar(nsInput.cssVarName('input-height'), inputInner).value\n    ) - 2\n\n  inputInitialHeight = inputInner.offsetHeight || inputInnerHeight\n  useResizeObserver(inputInner, updateStyle)\n})\n\ndefineExpose({\n  /**\n   * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n   */\n  getCheckedNodes,\n  /**\n   * @description cascader panel ref\n   */\n  cascaderPanelRef,\n  /**\n   * @description toggle the visible of popper\n   */\n  togglePopperVisible,\n})\n</script>\n", "import Cascader from './src/cascader.vue'\nimport type { App } from 'vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nCascader.install = (app: App): void => {\n  app.component(Cascader.name, Cascader)\n}\n\nconst _Cascader = Cascader as SFCWithInstall<typeof Cascader>\n\nexport default _Cascader\nexport const ElCascader = _Cascader\n\nexport * from './src/cascader'\nexport * from './src/instances'\n"],
  "mappings": "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",
  "names": []
}
