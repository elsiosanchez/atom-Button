{
  "version": 3,
  "sources": ["../../../packages/components/steps/src/steps.ts", "../../../packages/components/steps/src/steps.vue", "../../../packages/components/steps/src/item.ts", "../../../packages/components/steps/src/item.vue", "../../../packages/components/steps/index.ts"],
  "sourcesContent": ["import { CHANGE_EVENT } from '@element-plus/constants'\nimport { buildProps, isNumber } from '@element-plus/utils'\nimport type Steps from './steps.vue'\nimport type { ExtractPropTypes } from 'vue'\n\nexport const stepsProps = buildProps({\n  space: {\n    type: [Number, String],\n    default: '',\n  },\n  active: {\n    type: Number,\n    default: 0,\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    values: ['horizontal', 'vertical'],\n  },\n  alignCenter: {\n    type: Boolean,\n  },\n  simple: {\n    type: Boolean,\n  },\n  finishStatus: {\n    type: String,\n    values: ['wait', 'process', 'finish', 'error', 'success'],\n    default: 'finish',\n  },\n  processStatus: {\n    type: String,\n    values: ['wait', 'process', 'finish', 'error', 'success'],\n    default: 'process',\n  },\n} as const)\nexport type StepsProps = ExtractPropTypes<typeof stepsProps>\n\nexport const stepsEmits = {\n  [CHANGE_EVENT]: (newVal: number, oldVal: number) =>\n    [newVal, oldVal].every(isNumber),\n}\nexport type StepsEmits = typeof stepsEmits\n\nexport type StepsInstance = InstanceType<typeof Steps>\n", "<template>\n  <div :class=\"[ns.b(), ns.m(simple ? 'simple' : direction)]\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { provide, ref, watch } from 'vue'\nimport { CHANGE_EVENT } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { stepsEmits, stepsProps } from './steps'\n\nimport type { Ref } from 'vue'\nimport type { StepItemState } from './item.vue'\n\ndefineOptions({\n  name: 'ElSteps',\n})\n\nconst props = defineProps(stepsProps)\nconst emit = defineEmits(stepsEmits)\n\nconst ns = useNamespace('steps')\n\nconst steps: Ref<StepItemState[]> = ref([])\n\nwatch(steps, () => {\n  steps.value.forEach((instance: StepItemState, index: number) => {\n    instance.setIndex(index)\n  })\n})\n\nprovide('ElSteps', { props, steps })\n\nwatch(\n  () => props.active,\n  (newVal: number, oldVal: number) => {\n    emit(CHANGE_EVENT, newVal, oldVal)\n  }\n)\n</script>\n", "import { buildProps, iconPropType } from '@element-plus/utils'\nimport type Step from './item.vue'\nimport type { ExtractPropTypes } from 'vue'\n\nexport const stepProps = buildProps({\n  title: {\n    type: String,\n    default: '',\n  },\n  icon: {\n    type: iconPropType,\n  },\n  description: {\n    type: String,\n    default: '',\n  },\n  status: {\n    type: String,\n    values: ['', 'wait', 'process', 'finish', 'error', 'success'],\n    default: '',\n  },\n} as const)\n\nexport type StepProps = ExtractPropTypes<typeof stepProps>\n\nexport type StepInstance = InstanceType<typeof Step>\n", "<template>\n  <div\n    :style=\"style\"\n    :class=\"[\n      ns.b(),\n      ns.is(isSimple ? 'simple' : parent.props.direction),\n      ns.is('flex', isLast && !space && !isCenter),\n      ns.is('center', isCenter && !isVertical && !isSimple),\n    ]\"\n  >\n    <!-- icon & line -->\n    <div :class=\"[ns.e('head'), ns.is(currentStatus)]\">\n      <div v-if=\"!isSimple\" :class=\"ns.e('line')\">\n        <i :class=\"ns.e('line-inner')\" :style=\"lineStyle\" />\n      </div>\n\n      <div\n        :class=\"[ns.e('icon'), ns.is(icon || $slots.icon ? 'icon' : 'text')]\"\n      >\n        <slot name=\"icon\">\n          <el-icon v-if=\"icon\" :class=\"ns.e('icon-inner')\">\n            <component :is=\"icon\" />\n          </el-icon>\n          <el-icon\n            v-else-if=\"currentStatus === 'success'\"\n            :class=\"[ns.e('icon-inner'), ns.is('status')]\"\n          >\n            <Check />\n          </el-icon>\n          <el-icon\n            v-else-if=\"currentStatus === 'error'\"\n            :class=\"[ns.e('icon-inner'), ns.is('status')]\"\n          >\n            <Close />\n          </el-icon>\n          <div v-else-if=\"!isSimple\" :class=\"ns.e('icon-inner')\">\n            {{ index + 1 }}\n          </div>\n        </slot>\n      </div>\n    </div>\n    <!-- title & description -->\n    <div :class=\"ns.e('main')\">\n      <div :class=\"[ns.e('title'), ns.is(currentStatus)]\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div v-if=\"isSimple\" :class=\"ns.e('arrow')\" />\n      <div v-else :class=\"[ns.e('description'), ns.is(currentStatus)]\">\n        <slot name=\"description\">{{ description }}</slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { Check, Close } from '@element-plus/icons-vue'\nimport { isNumber } from '@element-plus/utils'\nimport { stepProps } from './item'\n\nimport type { CSSProperties, Ref } from 'vue'\n\nexport interface IStepsProps {\n  space: number | string\n  active: number\n  direction: string\n  alignCenter: boolean\n  simple: boolean\n  finishStatus: string\n  processStatus: string\n}\n\nexport interface StepItemState {\n  uid: number | undefined\n  currentStatus: string\n  setIndex: (val: number) => void\n  calcProgress: (status: string) => void\n}\n\nexport interface IStepsInject {\n  props: IStepsProps\n  steps: Ref<StepItemState[]>\n}\n\ndefineOptions({\n  name: 'ElStep',\n})\n\nconst props = defineProps(stepProps)\nconst ns = useNamespace('step')\nconst index = ref(-1)\nconst lineStyle = ref({})\nconst internalStatus = ref('')\nconst parent = inject('ElSteps') as IStepsInject\nconst currentInstance = getCurrentInstance()\n\nonMounted(() => {\n  watch(\n    [\n      () => parent.props.active,\n      () => parent.props.processStatus,\n      () => parent.props.finishStatus,\n    ],\n    ([active]) => {\n      updateStatus(active)\n    },\n    { immediate: true }\n  )\n})\n\nonBeforeUnmount(() => {\n  parent.steps.value = parent.steps.value.filter(\n    (instance) => instance.uid !== currentInstance?.uid\n  )\n})\n\nconst currentStatus = computed(() => {\n  return props.status || internalStatus.value\n})\n\nconst prevStatus = computed(() => {\n  const prevStep = parent.steps.value[index.value - 1]\n  return prevStep ? prevStep.currentStatus : 'wait'\n})\n\nconst isCenter = computed(() => {\n  return parent.props.alignCenter\n})\n\nconst isVertical = computed(() => {\n  return parent.props.direction === 'vertical'\n})\n\nconst isSimple = computed(() => {\n  return parent.props.simple\n})\n\nconst stepsCount = computed(() => {\n  return parent.steps.value.length\n})\n\nconst isLast = computed(() => {\n  return parent.steps.value[stepsCount.value - 1]?.uid === currentInstance?.uid\n})\n\nconst space = computed(() => {\n  return isSimple.value ? '' : parent.props.space\n})\n\nconst style = computed(() => {\n  const style: CSSProperties = {\n    flexBasis: isNumber(space.value)\n      ? `${space.value}px`\n      : space.value\n      ? space.value\n      : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`,\n  }\n  if (isVertical.value) return style\n  if (isLast.value) {\n    style.maxWidth = `${100 / stepsCount.value}%`\n  }\n  return style\n})\n\nconst setIndex = (val: number) => {\n  index.value = val\n}\n\nconst calcProgress = (status: string) => {\n  const isWait = status === 'wait'\n  const style: CSSProperties = {\n    transitionDelay: `${isWait ? '-' : ''}${150 * index.value}ms`,\n  }\n  const step = status === parent.props.processStatus || isWait ? 0 : 100\n\n  style.borderWidth = step && !isSimple.value ? '1px' : 0\n  style[parent.props.direction === 'vertical' ? 'height' : 'width'] = `${step}%`\n  lineStyle.value = style\n}\n\nconst updateStatus = (activeIndex: number) => {\n  if (activeIndex > index.value) {\n    internalStatus.value = parent.props.finishStatus\n  } else if (activeIndex === index.value && prevStatus.value !== 'error') {\n    internalStatus.value = parent.props.processStatus\n  } else {\n    internalStatus.value = 'wait'\n  }\n  const prevChild = parent.steps.value[index.value - 1]\n  if (prevChild) prevChild.calcProgress(internalStatus.value)\n}\n\nconst stepItemState = reactive({\n  uid: computed(() => currentInstance?.uid),\n  currentStatus,\n  setIndex,\n  calcProgress,\n})\n\nparent.steps.value = [...parent.steps.value, stepItemState]\n</script>\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Steps from './src/steps.vue'\nimport Step from './src/item.vue'\n\nexport const ElSteps = withInstall(Steps, {\n  Step,\n})\nexport default ElSteps\nexport const ElStep = withNoopInstall(Step)\n\nexport * from './src/item'\nexport * from './src/steps'\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEY,IAAC,aAAa,WAAW;EACnC,OAAO;IACL,MAAM,CAAC,QAAQ,MAAM;IACrB,SAAS;EACb;EACE,QAAQ;IACN,MAAM;IACN,SAAS;EACb;EACE,WAAW;IACT,MAAM;IACN,SAAS;IACT,QAAQ,CAAC,cAAc,UAAU;EACrC;EACE,aAAa;IACX,MAAM;EACV;EACE,QAAQ;IACN,MAAM;EACV;EACE,cAAc;IACZ,MAAM;IACN,QAAQ,CAAC,QAAQ,WAAW,UAAU,SAAS,SAAS;IACxD,SAAS;EACb;EACE,eAAe;IACb,MAAM;IACN,QAAQ,CAAC,QAAQ,WAAW,UAAU,SAAS,SAAS;IACxD,SAAS;EACb;AACA,CAAC;AACW,IAAC,aAAa;EACxB,CAAC,YAAY,GAAG,CAAC,QAAQ,WAAW,CAAC,QAAQ,MAAM,EAAE,MAAM,QAAQ;AACrE;;;kCCpBc;EACZ,MAAM;AACR,CAAA;;;;;;;AAKM,UAAA,KAAK,aAAa,OAAO;AAEzB,UAAA,QAA8B,IAAI,CAAA,CAAE;AAE1C,UAAM,OAAO,MAAM;AACjB,YAAM,MAAM,QAAQ,CAAC,UAAyB,UAAkB;AAC9D,iBAAS,SAAS,KAAK;MAAA,CACxB;IAAA,CACF;AAED,YAAQ,WAAW,EAAE,OAAO,MAAA,CAAO;AAEnC,UACE,MAAM,MAAM,QACZ,CAAC,QAAgB,WAAmB;AAC7B,WAAA,cAAc,QAAQ,MAAM;IAAA,CAErC;;;;;;;;;;;;;ACtCY,IAAC,YAAY,WAAW;EAClC,OAAO;IACL,MAAM;IACN,SAAS;EACb;EACE,MAAM;IACJ,MAAM;EACV;EACE,aAAa;IACX,MAAM;IACN,SAAS;EACb;EACE,QAAQ;IACN,MAAM;IACN,QAAQ,CAAC,IAAI,QAAQ,WAAW,UAAU,SAAS,SAAS;IAC5D,SAAS;EACb;AACA,CAAC;;;;mCC6Ea;EACZ,MAAM;AACR,CAAA;;;;;;AAGM,UAAA,KAAK,aAAa,MAAM;AACxB,UAAA,QAAQ,IAAI,EAAE;AACd,UAAA,YAAY,IAAI,CAAA,CAAE;AAClB,UAAA,iBAAiB,IAAI,EAAE;AACvB,UAAA,SAAS,OAAO,SAAS;AAC/B,UAAM,kBAAkB,mBAAmB;AAE3C,cAAU,MAAM;AAEZ,YAAA;QACE,MAAM,OAAO,MAAM;QACnB,MAAM,OAAO,MAAM;QACnB,MAAM,OAAO,MAAM;MAAA,GAErB,CAAC,CAAC,MAAY,MAAA;AACZ,qBAAa,MAAM;MAAA,GAErB,EAAE,WAAW,KAAA,CACf;IAAA,CACD;AAED,oBAAgB,MAAM;AACb,aAAA,MAAM,QAAQ,OAAO,MAAM,MAAM,OACtC,CAAC,aAAa,SAAS,SAAQ,mBACjC,OAAA,SAAA,gBAAA,IAAA;IAAA,CACD;AAEK,UAAA,gBAAgB,SAAS,MAAM;AAC5B,aAAA,MAAM,UAAU,eAAe;IAAA,CACvC;AAEK,UAAA,aAAa,SAAS,MAAM;AAChC,YAAM,WAAW,OAAO,MAAM,MAAM,MAAM,QAAQ,CAAA;AAC3C,aAAA,WAAW,SAAS,gBAAgB;IAAA,CAC5C;AAEK,UAAA,WAAW,SAAS,MAAM;AAC9B,aAAO,OAAO,MAAM;IAAA,CACrB;AAEK,UAAA,aAAa,SAAS,MAAM;AACzB,aAAA,OAAO,MAAM,cAAc;IAAA,CACnC;AAEK,UAAA,WAAW,SAAS,MAAM;AAC9B,aAAO,OAAO,MAAM;IAAA,CACrB;AAEK,UAAA,aAAa,SAAS,MAAM;AACzB,aAAA,OAAO,MAAM,MAAM;IAAA,CAC3B;AAEK,UAAA,SAAS,SAAS,MAAM;AAC5B,UAAA;AACD,eAAA,KAAA,OAAA,MAAA,MAAA,WAAA,QAAA,CAAA,MAAA,OAAA,SAAA,GAAA,UAAA,mBAAA,OAAA,SAAA,gBAAA;IAED,CAAM;AACJ,UAAA,QAAgB,SAAA,MAAa;AAC9B,aAAA,SAAA,QAAA,KAAA,OAAA,MAAA;IAED,CAAM;AACJ,UAAA,QAA6B,SAAA,MAAA;AAAA,YAAA,SACP;QAKtB,WAAAA,UAAA,MAAA,KAAA,IAAA,GAAA,MAAA,YAAA,MAAA,QAAA,MAAA,QAAA,GAAA,OAAA,WAAA,SAAA,SAAA,QAAA,IAAA;MACA;AAA6B,UAAA,WAAA;AAC7B,eAAA;AACQ,UAAA,OAAA,OAAA;AACR,eAAA,WAAA,GAAA,MAAA,WAAA;MACA;AACD,aAAA;IAED,CAAM;AACJ,UAAA,WAAc,CAAA,QAAA;AAChB,YAAA,QAAA;IAEA;AACE,UAAA,eAA0B,CAAA,WAAA;AAC1B,YAAM,SAAuB,WAAA;AAAA,YAAA,SAAA;QAE7B,iBAAA,GAAA,SAAA,MAAA,KAAA,MAAA,MAAA;MACA;AAEA,YAAA,OAAoB,WAAA,OAAS,MAAA,iBAAyB,SAAA,IAAA;AACtD,aAAM,cAAa,QAAA,CAAA,SAA2B,QAAA,QAAA;AAC9C,aAAA,OAAkB,MAAA,cAAA,aAAA,WAAA,OAAA,IAAA,GAAA;AACpB,gBAAA,QAAA;IAEA;AACM,UAAA,eAAA,CAAA,gBAA2B;AACd,UAAA,cAAA,MAAA,OAAA;AAAqB,uBACX,QAAA,OAAA,MAAe;MACxC,WAAe,gBAAA,MAAqB,SAAA,WAAA,UAAA,SAAA;AAC/B,uBAAA,QAAA,OAAA,MAAA;MACL,OAAA;AACF,uBAAA,QAAA;MACA;AACI,YAAA,YAAA,OAAA,MAAA,MAAA,MAAA,QAAA,CAAA;AAAqB,UAAA;AAC3B,kBAAA,aAAA,eAAA,KAAA;IAEA;AAA+B,UACxB,gBAAe,SAAA;MACpB,KAAA,SAAA,MAAA,mBAAA,OAAA,SAAA,gBAAA,GAAA;MACA;MACA;MACD;IAED,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/MY,IAAC,UAAU,YAAY,OAAO;EACxC;AACF,CAAC;AAEW,IAAC,SAAS,gBAAgB,IAAI;",
  "names": ["isNumber"]
}
