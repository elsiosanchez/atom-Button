{
  "version": 3,
  "sources": ["../../../packages/components/tooltip-v2/src/common.ts", "../../../packages/components/tooltip-v2/src/arrow.ts", "../../../packages/components/tooltip-v2/src/content.ts", "../../../packages/components/tooltip-v2/src/root.ts", "../../../packages/components/tooltip-v2/src/trigger.ts", "../../../packages/components/tooltip-v2/src/tooltip.ts", "../../../packages/components/tooltip-v2/src/constants.ts", "../../../packages/components/tooltip-v2/src/root.vue", "../../../packages/components/tooltip-v2/src/arrow.vue", "../../../packages/components/visual-hidden/src/visual-hidden.ts", "../../../packages/components/visual-hidden/src/visual-hidden.vue", "../../../packages/components/tooltip-v2/src/content.vue", "../../../packages/components/tooltip-v2/src/forward-ref.tsx", "../../../packages/components/tooltip-v2/src/trigger.vue", "../../../packages/components/tooltip-v2/src/tooltip.vue", "../../../packages/components/tooltip-v2/index.ts"],
  "sourcesContent": ["import { buildProps } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\n\n/**\n * TODO: make this under constants or tokens\n */\nexport const tooltipV2CommonProps = buildProps({\n  nowrap: Boolean,\n} as const)\n\nexport type TooltipV2CommonProps = ExtractPropTypes<typeof tooltipV2CommonProps>\n\nexport enum TooltipV2Sides {\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right',\n}\n\nexport const tooltipV2Sides = Object.values(TooltipV2Sides)\n\nexport const tooltipV2OppositeSide = {\n  [TooltipV2Sides.top]: TooltipV2Sides.bottom,\n  [TooltipV2Sides.bottom]: TooltipV2Sides.top,\n  [TooltipV2Sides.left]: TooltipV2Sides.right,\n  [TooltipV2Sides.right]: TooltipV2Sides.left,\n} as const\n\nexport const tooltipV2ArrowBorders = {\n  [TooltipV2Sides.top]: [TooltipV2Sides.left, TooltipV2Sides.top],\n  [TooltipV2Sides.bottom]: [TooltipV2Sides.bottom, TooltipV2Sides.right],\n  [TooltipV2Sides.left]: [TooltipV2Sides.bottom, TooltipV2Sides.left],\n  [TooltipV2Sides.right]: [TooltipV2Sides.top, TooltipV2Sides.right],\n} as const\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport { tooltipV2Sides } from './common'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { TooltipV2Sides } from './common'\n\nexport const tooltipV2ArrowProps = buildProps({\n  width: {\n    type: Number,\n    default: 10,\n  },\n  height: {\n    type: Number,\n    default: 10,\n  },\n  style: {\n    type: definePropType<CSSProperties | null>(Object),\n    default: null,\n  },\n} as const)\n\nexport const tooltipV2ArrowSpecialProps = buildProps({\n  side: {\n    type: definePropType<TooltipV2Sides>(String),\n    values: tooltipV2Sides,\n    required: true,\n  },\n} as const)\n\nexport type TooltipV2ArrowProps = ExtractPropTypes<typeof tooltipV2ArrowProps>\n", "import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { Placement, Strategy, VirtualElement } from '@floating-ui/dom'\n\nconst tooltipV2Strategies = ['absolute', 'fixed'] as const\n\nconst tooltipV2Placements = [\n  'top-start',\n  'top-end',\n  'top',\n  'bottom-start',\n  'bottom-end',\n  'bottom',\n  'left-start',\n  'left-end',\n  'left',\n  'right-start',\n  'right-end',\n  'right',\n] as const\n\nexport const tooltipV2ContentProps = buildProps({\n  ariaLabel: String,\n  arrowPadding: {\n    type: definePropType<number>(Number),\n    default: 5,\n  },\n  effect: {\n    type: String,\n    default: '',\n  },\n  contentClass: String,\n  /**\n   * Placement of tooltip content relative to reference element (when absent it refers to trigger)\n   */\n  placement: {\n    type: definePropType<Placement>(String),\n    values: tooltipV2Placements,\n    default: 'bottom',\n  },\n  /**\n   * Reference element for tooltip content to set its position\n   */\n  reference: {\n    type: definePropType<HTMLElement | VirtualElement | null>(Object),\n    default: null,\n  },\n  offset: {\n    type: Number,\n    default: 8,\n  },\n  strategy: {\n    type: definePropType<Strategy>(String),\n    values: tooltipV2Strategies,\n    default: 'absolute',\n  },\n  showArrow: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport type TooltipV2ContentProps = ExtractPropTypes<\n  typeof tooltipV2ContentProps\n>\n", "import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype StateUpdater = (state: boolean) => void\n\nexport const tooltipV2RootProps = buildProps({\n  delayDuration: {\n    type: Number,\n    default: 300,\n  },\n  defaultOpen: Boolean,\n  open: {\n    type: Boolean,\n    default: undefined,\n  },\n  onOpenChange: {\n    type: definePropType<StateUpdater>(Function),\n  },\n  'onUpdate:open': {\n    type: definePropType<StateUpdater>(Function),\n  },\n} as const)\n\nexport type TooltipV2RootProps = ExtractPropTypes<typeof tooltipV2RootProps>\n", "import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\n\nconst EventHandler = {\n  type: definePropType<(e: Event) => boolean | void>(Function),\n} as const\n\nexport const tooltipV2TriggerProps = buildProps({\n  onBlur: EventHandler,\n  onClick: EventHandler,\n  onFocus: EventHandler,\n  onMouseDown: EventHandler,\n  onMouseEnter: EventHandler,\n  onMouseLeave: EventHandler,\n} as const)\n\nexport type TooltipV2TriggerProps = ExtractPropTypes<\n  typeof tooltipV2TriggerProps\n>\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport { tooltipV2RootProps } from './root'\nimport { tooltipV2TriggerProps } from './trigger'\nimport { tooltipV2ArrowProps } from './arrow'\nimport { tooltipV2ContentProps } from './content'\n\nimport type { ExtractPropTypes, TeleportProps, TransitionProps } from 'vue'\n\nexport const tooltipV2Props = buildProps({\n  ...tooltipV2RootProps,\n  ...tooltipV2ArrowProps,\n  ...tooltipV2TriggerProps,\n  ...tooltipV2ContentProps,\n  alwaysOn: Boolean,\n  fullTransition: Boolean,\n  transitionProps: {\n    type: definePropType<TransitionProps | null>(Object),\n    default: null,\n  },\n  teleported: Boolean,\n  to: {\n    type: definePropType<TeleportProps['to']>(String),\n    default: 'body',\n  },\n} as const)\n\nexport type TooltipV2Props = ExtractPropTypes<typeof tooltipV2Props>\n", "import type { InjectionKey, Ref } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\n\nexport type TooltipV2Context = {\n  onClose: () => void\n  onDelayOpen: () => void\n  onOpen: () => void\n  contentId: Ref<string>\n  triggerRef: Ref<HTMLElement | null>\n  ns: UseNamespaceReturn\n}\n\nexport type TooltipV2ContentContext = {\n  arrowRef: Ref<HTMLElement | null>\n}\n\nexport const tooltipV2RootKey: InjectionKey<TooltipV2Context> =\n  Symbol('tooltipV2')\n\nexport const tooltipV2ContentKey: InjectionKey<TooltipV2ContentContext> =\n  Symbol('tooltipV2Content')\n\nexport const TOOLTIP_V2_OPEN = 'tooltip_v2.open'\n", "<template>\n  <slot :open=\"open\" />\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  computed,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { useTimeoutFn } from '@vueuse/core'\nimport { useId, useNamespace } from '@element-plus/hooks'\nimport { isNumber, isPropAbsent } from '@element-plus/utils'\nimport { TOOLTIP_V2_OPEN, tooltipV2RootKey } from './constants'\nimport { tooltipV2RootProps } from './root'\n\ndefineOptions({\n  name: 'ElTooltipV2Root',\n})\n\nconst props = defineProps(tooltipV2RootProps)\n\n/**\n * internal open state, when no model value was provided, use this as indicator instead\n */\nconst _open = ref(props.defaultOpen)\nconst triggerRef = ref<HTMLElement | null>(null)\n\nconst open = computed<boolean>({\n  get: () => (isPropAbsent(props.open) ? _open.value : props.open),\n  set: (open) => {\n    _open.value = open\n    props['onUpdate:open']?.(open)\n  },\n})\n\nconst isOpenDelayed = computed(\n  () => isNumber(props.delayDuration) && props.delayDuration > 0\n)\n\nconst { start: onDelayedOpen, stop: clearTimer } = useTimeoutFn(\n  () => {\n    open.value = true\n  },\n  computed(() => props.delayDuration),\n  {\n    immediate: false,\n  }\n)\n\nconst ns = useNamespace('tooltip-v2')\n\nconst contentId = useId()\n\nconst onNormalOpen = () => {\n  clearTimer()\n  open.value = true\n}\n\nconst onDelayOpen = () => {\n  unref(isOpenDelayed) ? onDelayedOpen() : onNormalOpen()\n}\n\nconst onOpen = onNormalOpen\n\nconst onClose = () => {\n  clearTimer()\n  open.value = false\n}\n\nconst onChange = (open: boolean) => {\n  if (open) {\n    document.dispatchEvent(new CustomEvent(TOOLTIP_V2_OPEN))\n    onOpen()\n  }\n\n  props.onOpenChange?.(open)\n}\n\nwatch(open, onChange)\n\nonMounted(() => {\n  // Keeps only 1 tooltip open at a time\n  document.addEventListener(TOOLTIP_V2_OPEN, onClose)\n})\n\nonBeforeUnmount(() => {\n  clearTimer()\n  document.removeEventListener(TOOLTIP_V2_OPEN, onClose)\n})\n\nprovide(tooltipV2RootKey, {\n  contentId,\n  triggerRef,\n  ns,\n\n  onClose,\n  onDelayOpen,\n  onOpen,\n})\n\ndefineExpose({\n  /**\n   * @description open tooltip programmatically\n   */\n  onOpen,\n\n  /**\n   * @description close tooltip programmatically\n   */\n  onClose,\n})\n</script>\n", "<template>\n  <span ref=\"arrowRef\" :style=\"arrowStyle\" :class=\"ns.e('arrow')\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject } from 'vue'\nimport { tooltipV2ContentKey, tooltipV2RootKey } from './constants'\nimport { tooltipV2ArrowProps, tooltipV2ArrowSpecialProps } from './arrow'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElTooltipV2Arrow',\n})\n\nconst props = defineProps({\n  ...tooltipV2ArrowProps,\n  ...tooltipV2ArrowSpecialProps,\n})\n\nconst { ns } = inject(tooltipV2RootKey)!\nconst { arrowRef } = inject(tooltipV2ContentKey)!\n\nconst arrowStyle = computed<CSSProperties>(() => {\n  const { style, width, height } = props\n  const namespace = ns.namespace.value\n\n  return {\n    [`--${namespace}-tooltip-v2-arrow-width`]: `${width}px`,\n    [`--${namespace}-tooltip-v2-arrow-height`]: `${height}px`,\n    [`--${namespace}-tooltip-v2-arrow-border-width`]: `${width / 2}px`,\n    [`--${namespace}-tooltip-v2-arrow-cover-width`]: width / 2 - 1,\n    ...(style || {}),\n  }\n})\n</script>\n", "import { buildProps, definePropType } from '@element-plus/utils'\nimport type { StyleValue } from 'vue'\n\nexport const visualHiddenProps = buildProps({\n  style: {\n    type: definePropType<StyleValue>([String, Object, Array]),\n    default: () => ({}),\n  },\n} as const)\n", "<template>\n  <span v-bind=\"$attrs\" :style=\"computedStyle\">\n    <slot />\n  </span>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { visualHiddenProps } from './visual-hidden'\nimport type { StyleValue } from 'vue'\nconst props = defineProps(visualHiddenProps)\n\ndefineOptions({\n  name: 'ElVisuallyHidden',\n})\n\nconst computedStyle = computed<StyleValue>(() => {\n  return [\n    props.style,\n    {\n      position: 'absolute',\n      border: 0,\n      width: 1,\n      height: 1,\n      padding: 0,\n      margin: -1,\n      overflow: 'hidden',\n      clip: 'rect(0, 0, 0, 0)',\n      whiteSpace: 'nowrap',\n      wordWrap: 'normal',\n    },\n  ]\n})\n</script>\n", "<template>\n  <div ref=\"contentRef\" :style=\"contentStyle\" data-tooltip-v2-root>\n    <div v-if=\"!nowrap\" :data-side=\"side\" :class=\"contentClass\">\n      <slot :content-style=\"contentStyle\" :content-class=\"contentClass\" />\n      <el-visually-hidden :id=\"contentId\" role=\"tooltip\">\n        <template v-if=\"ariaLabel\">\n          {{ ariaLabel }}\n        </template>\n        <slot v-else />\n      </el-visually-hidden>\n      <slot name=\"arrow\" :style=\"arrowStyle\" :side=\"side\" />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject, onMounted, provide, ref, unref, watch } from 'vue'\nimport { offset } from '@floating-ui/dom'\nimport {\n  arrowMiddleware,\n  useFloating,\n  useNamespace,\n  useZIndex,\n} from '@element-plus/hooks'\nimport ElVisuallyHidden from '@element-plus/components/visual-hidden'\nimport { tooltipV2ContentKey, tooltipV2RootKey } from './constants'\nimport { tooltipV2ContentProps } from './content'\nimport { tooltipV2CommonProps } from './common'\n\nimport type { CSSProperties } from 'vue'\nimport type { Middleware } from '@floating-ui/dom'\n\ndefineOptions({\n  name: 'ElTooltipV2Content',\n})\n\nconst props = defineProps({ ...tooltipV2ContentProps, ...tooltipV2CommonProps })\n\nconst { triggerRef, contentId } = inject(tooltipV2RootKey)!\n\nconst placement = ref(props.placement)\nconst strategy = ref(props.strategy)\nconst arrowRef = ref<HTMLElement | null>(null)\n\nconst { referenceRef, contentRef, middlewareData, x, y, update } = useFloating({\n  placement,\n  strategy,\n  middleware: computed(() => {\n    const middleware: Middleware[] = [offset(props.offset)]\n\n    if (props.showArrow) {\n      middleware.push(\n        arrowMiddleware({\n          arrowRef,\n        })\n      )\n    }\n\n    return middleware\n  }),\n})\n\nconst zIndex = useZIndex().nextZIndex()\n\nconst ns = useNamespace('tooltip-v2')\n\nconst side = computed(() => {\n  return placement.value.split('-')[0]\n})\n\nconst contentStyle = computed<CSSProperties>(() => {\n  return {\n    position: unref(strategy),\n    top: `${unref(y) || 0}px`,\n    left: `${unref(x) || 0}px`,\n    zIndex,\n  }\n})\n\nconst arrowStyle = computed<CSSProperties>(() => {\n  if (!props.showArrow) return {}\n\n  const { arrow } = unref(middlewareData)\n\n  return {\n    [`--${ns.namespace.value}-tooltip-v2-arrow-x`]: `${arrow?.x}px` || '',\n    [`--${ns.namespace.value}-tooltip-v2-arrow-y`]: `${arrow?.y}px` || '',\n  }\n})\n\nconst contentClass = computed(() => [\n  ns.e('content'),\n  ns.is('dark', props.effect === 'dark'),\n  ns.is(unref(strategy)),\n  props.contentClass,\n])\n\nwatch(arrowRef, () => update())\n\nwatch(\n  () => props.placement,\n  (val) => (placement.value = val)\n)\n\nonMounted(() => {\n  watch(\n    () => props.reference || triggerRef.value,\n    (el) => {\n      referenceRef.value = el || undefined\n    },\n    {\n      immediate: true,\n    }\n  )\n})\n\nprovide(tooltipV2ContentKey, { arrowRef })\n</script>\n", "import { Fragment, defineComponent, ref } from 'vue'\nimport {\n  buildProps,\n  composeRefs,\n  definePropType,\n  ensureOnlyChild,\n} from '@element-plus/utils'\n\nimport type { ExtractPropTypes, VNodeArrayChildren } from 'vue'\n\nexport type RefSetter = (el: HTMLElement | null) => void\n\nexport const forwardRefProps = buildProps({\n  setRef: { type: definePropType<RefSetter>(Function), required: true },\n  onlyChild: Boolean,\n} as const)\n\nexport type ForwardRefProps = ExtractPropTypes<typeof forwardRefProps>\n\n// TODO: consider make this component a reusable component without the only child feature.\nexport default defineComponent({\n  props: forwardRefProps,\n  setup(props, { slots }) {\n    const fragmentRef = ref()\n    const setRef = composeRefs(fragmentRef, (el) => {\n      // vue fragments is represented as a text element.\n      // The first element sibling should be the first element children of fragment.\n      // This is how we get the element.\n      if (el) {\n        props.setRef(\n          (el as HTMLElement).nextElementSibling as HTMLElement | null\n        )\n      } else {\n        props.setRef(null)\n      }\n    })\n    return () => {\n      const [firstChild] = slots.default?.() || []\n      const child = props.onlyChild\n        ? ensureOnlyChild(firstChild.children as VNodeArrayChildren)\n        : firstChild.children\n      // Dunno why the ref for jsx complains about the typing issue which was not\n      // in template\n      return <Fragment ref={setRef as any}>{child}</Fragment>\n    }\n  },\n})\n", "<template>\n  <forward-ref v-if=\"nowrap\" :set-ref=\"setTriggerRef\" only-child>\n    <slot />\n  </forward-ref>\n  <button v-else ref=\"triggerRef\" v-bind=\"$attrs\">\n    <slot />\n  </button>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, onBeforeUnmount, watch } from 'vue'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { tooltipV2RootKey } from './constants'\nimport ForwardRef from './forward-ref'\nimport { tooltipV2TriggerProps } from './trigger'\nimport { tooltipV2CommonProps } from './common'\n\ndefineOptions({\n  name: 'ElTooltipV2Trigger',\n})\n\nconst props = defineProps({\n  ...tooltipV2CommonProps,\n  ...tooltipV2TriggerProps,\n})\n\n/**\n * onOpen opens the tooltip instantly, onTrigger acts a lil bit differently,\n * it will check if delayDuration is set to greater than 0 and based on that result,\n * if true, it opens the tooltip after delayDuration, otherwise it opens it instantly.\n */\nconst { onClose, onOpen, onDelayOpen, triggerRef, contentId } =\n  inject(tooltipV2RootKey)!\n\nlet isMousedown = false\n\nconst setTriggerRef = (el: HTMLElement | null) => {\n  triggerRef.value = el\n}\n\nconst onMouseup = () => {\n  isMousedown = false\n}\n\nconst onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen)\n\nconst onMouseleave = composeEventHandlers(props.onMouseLeave, onClose)\n\nconst onMousedown = composeEventHandlers(props.onMouseDown, () => {\n  onClose()\n  isMousedown = true\n  document.addEventListener('mouseup', onMouseup, { once: true })\n})\n\nconst onFocus = composeEventHandlers(props.onFocus, () => {\n  if (!isMousedown) onOpen()\n})\n\nconst onBlur = composeEventHandlers(props.onBlur, onClose)\n\nconst onClick = composeEventHandlers(props.onClick, (e) => {\n  if ((e as MouseEvent).detail === 0) onClose()\n})\n\nconst events = {\n  blur: onBlur,\n  click: onClick,\n  focus: onFocus,\n  mousedown: onMousedown,\n  mouseenter: onMouseenter,\n  mouseleave: onMouseleave,\n}\n\nconst setEvents = <T extends (e: Event) => void>(\n  el: HTMLElement | null | undefined,\n  events: Record<string, T>,\n  type: 'addEventListener' | 'removeEventListener'\n) => {\n  if (el) {\n    Object.entries(events).forEach(([name, handler]) => {\n      el[type](name, handler)\n    })\n  }\n}\n\nwatch(triggerRef, (triggerEl, previousTriggerEl) => {\n  setEvents(triggerEl, events, 'addEventListener')\n  setEvents(previousTriggerEl, events, 'removeEventListener')\n\n  if (triggerEl) {\n    triggerEl.setAttribute('aria-describedby', contentId.value)\n  }\n})\n\nonBeforeUnmount(() => {\n  setEvents(triggerRef.value, events, 'removeEventListener')\n  document.removeEventListener('mouseup', onMouseup)\n})\n</script>\n", "<template>\n  <tooltip-v2-root v-bind=\"rootProps\">\n    <template #default=\"{ open }\">\n      <tooltip-v2-trigger v-bind=\"triggerProps\" nowrap>\n        <slot name=\"trigger\" />\n      </tooltip-v2-trigger>\n      <teleport :to=\"to\" :disabled=\"!teleported\">\n        <template v-if=\"fullTransition\">\n          <transition v-bind=\"transitionProps\">\n            <tooltip-v2-content v-if=\"alwaysOn || open\" v-bind=\"contentProps\">\n              <slot />\n              <template #arrow=\"{ style, side }\">\n                <tooltip-v2-arrow\n                  v-if=\"showArrow\"\n                  v-bind=\"arrowProps\"\n                  :style=\"style\"\n                  :side=\"side\"\n                />\n              </template>\n            </tooltip-v2-content>\n          </transition>\n        </template>\n        <template v-else>\n          <tooltip-v2-content v-if=\"alwaysOn || open\" v-bind=\"contentProps\">\n            <slot />\n            <template #arrow=\"{ style, side }\">\n              <tooltip-v2-arrow\n                v-if=\"showArrow\"\n                v-bind=\"arrowProps\"\n                :style=\"style\"\n                :side=\"side\"\n              />\n            </template>\n          </tooltip-v2-content>\n        </template>\n      </teleport>\n    </template>\n  </tooltip-v2-root>\n</template>\n\n<script setup lang=\"ts\">\n// @ts-nocheck\nimport { reactive, toRefs } from 'vue'\nimport { pick } from 'lodash-unified'\nimport { tooltipV2ArrowProps } from './arrow'\nimport { tooltipV2ContentProps } from './content'\nimport { tooltipV2RootProps } from './root'\nimport { tooltipV2Props } from './tooltip'\nimport { tooltipV2TriggerProps } from './trigger'\nimport TooltipV2Root from './root.vue'\nimport TooltipV2Arrow from './arrow.vue'\nimport TooltipV2Content from './content.vue'\nimport TooltipV2Trigger from './trigger.vue'\n\ndefineOptions({\n  name: 'ElTooltipV2',\n})\n\nconst props = defineProps(tooltipV2Props)\n\nconst refedProps = toRefs(props)\n\nconst arrowProps = reactive(pick(refedProps, Object.keys(tooltipV2ArrowProps)))\n\nconst contentProps = reactive(\n  pick(refedProps, Object.keys(tooltipV2ContentProps))\n)\n\nconst rootProps = reactive(pick(refedProps, Object.keys(tooltipV2RootProps)))\n\nconst triggerProps = reactive(\n  pick(refedProps, Object.keys(tooltipV2TriggerProps))\n)\n</script>\n", "import { withInstall } from '@element-plus/utils'\nimport TooltipV2 from './src/tooltip.vue'\n\nexport const ElTooltipV2 = withInstall(TooltipV2)\nexport * from './src/arrow'\nexport * from './src/content'\nexport * from './src/root'\nexport * from './src/tooltip'\nexport * from './src/trigger'\nexport * from './src/constants'\n\nexport default ElTooltipV2\n"],
  "mappings": "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",
  "names": ["forwardRefProps", "buildProps", "setRef", "type", "definePropType", "Function", "required", "onlyChild", "Boolean", "props", "slots", "fragmentRef", "composeRefs", "_createVNode", "_Fragment"]
}
